<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace tink\cli;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \haxe\Exception;
use \tink\core\Noise;
use \tink\core\TypedError;
use \which\Program;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxString;
use \tink\core\_Future\Future_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\FutureObject;

class Router0 extends Router {
	/**
	 * @param Program $command
	 * @param Prompt $prompt
	 * 
	 * @return void
	 */
	public function __construct ($command, $prompt) {
		parent::__construct($command, $prompt, true);
	}

	/**
	 * @param \Array_hx $args
	 * 
	 * @return FutureObject
	 */
	public function process ($args) {
		$_gthis = $this;
		if (($args->arr[0] ?? null) === null) {
			$args1 = null;
			$_g = $this->processArgs($args);
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				$args1 = $_g->params[0];
			} else if ($__hx__switch === 1) {
				return new SyncFuture(new LazyConst(Outcome::Failure($_g->params[0])));
			}
			return Promise_Impl_::next($this->promptRequired(), function ($_) use (&$args1, &$_gthis) {
				return $_gthis->run_run($args1);
			});
		} else {
			$args2 = null;
			$_g = $this->processArgs($args);
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				$args2 = $_g->params[0];
			} else if ($__hx__switch === 1) {
				return new SyncFuture(new LazyConst(Outcome::Failure($_g->params[0])));
			}
			return Promise_Impl_::next($this->promptRequired(), function ($_) use (&$args2, &$_gthis) {
				return $_gthis->run_run($args2);
			});
		}
	}

	/**
	 * @param \Array_hx $args
	 * @param int $index
	 * 
	 * @return int
	 */
	public function processAlias ($args, $index) {
		$str = ($args->arr[$index] ?? null);
		$_g = 1;
		$_g1 = mb_strlen($str);
		while ($_g < $_g1) {
			$i = $_g++;
			$_g2 = HxString::charCodeAt($str, $i);
			if ($_g2 === null) {
				throw Exception::thrown("Invalid alias '-" . ((($i < 0 ? "" : mb_substr($str, $i, 1)))??'null') . "'");
			} else {
				if ($_g2 === 97) {
					$this->command->all = true;
				} else if ($_g2 === 104) {
					$this->command->help = true;
				} else if ($_g2 === 115) {
					$this->command->silent = true;
				} else if ($_g2 === 118) {
					$this->command->version = true;
				} else {
					throw Exception::thrown("Invalid alias '-" . ((($i < 0 ? "" : mb_substr($str, $i, 1)))??'null') . "'");
				}
			}
		}
		return $index - $index;
	}

	/**
	 * @param \Array_hx $args
	 * @param int $index
	 * 
	 * @return int
	 */
	public function processFlag ($args, $index) {
		$__hx__switch = (($args->arr[$index] ?? null));
		if ($__hx__switch === "--all") {
			$this->command->all = true;
		} else if ($__hx__switch === "--help") {
			$this->command->help = true;
		} else if ($__hx__switch === "--silent") {
			$this->command->silent = true;
		} else if ($__hx__switch === "--version") {
			$this->command->version = true;
		} else {
			return -1;
		}
		return $index - $index;
	}

	/**
	 * @return FutureObject
	 */
	public function promptRequired () {
		return Future_Impl_::async(function ($cb) {
			$cb(Outcome::Success(Noise::Noise()));
		});
	}

	/**
	 * @param \Array_hx $args
	 * 
	 * @return FutureObject
	 */
	public function run_run ($args) {
		if ($args->length < 0) {
			return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(null, "Insufficient arguments. Expected: " . 0 . ", Got: " . ($args->length??'null'), new HxAnon([
				"fileName" => "src/which/Program.hx",
				"lineNumber" => 34,
				"className" => "tink.cli.Router0",
				"methodName" => "run_run",
			])))));
		}
		$this->command->run($args->slice(0, $args->length));
		return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
	}
}

Boot::registerClass(Router0::class, 'tink.cli.Router0');
