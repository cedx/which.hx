<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace which;

use \php\Boot;
use \php\_Boot\HxString;
use \sys\FileSystem;
use \haxe\io\Path;

/**
 * Finds the instances of an executable in the system path.
 */
class Finder {

	/**
	 * @var \Array_hx
	 * The list of executable file extensions.
	 */
	public $extensions;
	/**
	 * @var \Array_hx
	 * The list of system paths.
	 */
	public $path;
	/**
	 * @var string
	 * The character used to separate paths in the system path.
	 */
	public $pathSeparator;

	/**
	 * Gets a value indicating whether the current platform is Windows.
	 * 
	 * @return bool
	 */
	public static function get_isWindows () {
		if (\Sys::systemName() === "Windows") {
			return true;
		}
		$osType = \Sys::getEnv("OSTYPE");
		if ($osType !== "cygwin") {
			return $osType === "msys";
		} else {
			return true;
		}
	}

	/**
	 * Creates a new finder.
	 * 
	 * @param mixed $options
	 * 
	 * @return void
	 */
	public function __construct ($options = null) {
		$this->pathSeparator = (Finder::get_isWindows() ? ";" : ":");
		$this->extensions = (Finder::get_isWindows() ? HxString::split(\Sys::getEnv("PATHEXT"), $this->pathSeparator) : new \Array_hx());
		$this->path = HxString::split(\Sys::getEnv("PATH"), $this->pathSeparator);
		if ($options !== null) {
			if (isset($options["extensions"])) {
				$this->extensions = $options["extensions"];
			}
			if (isset($options["path"])) {
				$this->path = $options["path"];
			}
			if (isset($options["pathSeparator"])) {
				$this->pathSeparator = $options["pathSeparator"];
			}
		}
	}

	/**
	 * Checks that the specified `file` is executable according to the executable file extensions.
	 * 
	 * @param string $file
	 * 
	 * @return bool
	 */
	public function checkFileExtension ($file) {
		$extension = Path::extension($file);
		if (mb_strlen($extension) > 0) {
			return $this->extensions->indexOf("." . ($extension??'null')) !== -1;
		} else {
			return false;
		}
	}

	/**
	 * Checks that the specified `file` is executable according to its permissions.
	 * 
	 * @param string $file
	 * 
	 * @return bool
	 */
	public function checkFilePermissions ($file) {
		$stats = FileSystem::stat($file);
		if (($stats->mode & 1) !== 0) {
			return true;
		}
		if (($stats->mode & 8) !== 0) {
			return -1 === $stats->gid;
		}
		if (($stats->mode & 64) !== 0) {
			return -1 === $stats->uid;
		}
		if (($stats->mode & 72) !== 0) {
			return false;
		} else {
			return false;
		}
	}

	/**
	 * Finds the instances of an executable `command` in the specified `directory`.
	 * 
	 * @param string $directory
	 * @param string $command
	 * 
	 * @return object
	 */
	public function findExecutables ($directory, $command) {
		return null;
	}

	/**
	 * Gets a numeric `identity` of the current process.
	 * 
	 * @param string $identity
	 * 
	 * @return int
	 */
	public function getProcessId ($identity) {
		if (Finder::get_isWindows()) {
			return -1;
		}
		return -1;
	}

	/**
	 * Gets a value indicating whether the specified `file` is executable.
	 * 
	 * @param string $file
	 * 
	 * @return bool
	 */
	public function isExecutable ($file) {
		clearstatcache(true, $file);
		if (!file_exists($file) || FileSystem::isDirectory($file)) {
			return false;
		}
		if (Finder::get_isWindows()) {
			return $this->checkFileExtension($file);
		} else {
			return $this->checkFilePermissions($file);
		}
	}
}

Boot::registerClass(Finder::class, 'which.Finder');
Boot::registerGetters('which\\Finder', [
	'isWindows' => true
]);
