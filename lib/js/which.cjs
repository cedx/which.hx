// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
}
EReg.__name__ = true;
Object.assign(EReg.prototype, {
	__class__: EReg
});
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
}
HxOverrides.__name__ = true;
class Lambda {
	static fold(it,f,first) {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			first = f(x1,first);
		}
		return first;
	}
	static find(it,f) {
		var v = $getIterator(it);
		while(v.hasNext()) {
			var v1 = v.next();
			if(f(v1)) {
				return v1;
			}
		}
		return null;
	}
}
Lambda.__name__ = true;
Math.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			var _g = 0;
			var _g1 = x.length;
			while(_g < _g1) {
				var i = _g++;
				var c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
Std.__name__ = true;
class StringTools {
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		var buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static rpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		var buf_b = "";
		buf_b += s == null ? "null" : "" + s;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		return buf_b;
	}
}
StringTools.__name__ = true;
class haxe_io_Output {
	writeByte(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	writeBytes(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	close() {
	}
}
haxe_io_Output.__name__ = true;
Object.assign(haxe_io_Output.prototype, {
	__class__: haxe_io_Output
});
class _$Sys_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	writeByte(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	writeBytes(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	writeString(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	flush() {
		js_node_Fs.fsyncSync(this.fd);
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
Object.assign(_$Sys_FileOutput.prototype, {
	__class__: _$Sys_FileOutput
});
class haxe_io_Input {
	readByte() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	readBytes(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	close() {
	}
}
haxe_io_Input.__name__ = true;
Object.assign(haxe_io_Input.prototype, {
	__class__: haxe_io_Input
});
class _$Sys_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	readByte() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		return buf[0];
	}
	readBytes(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
Object.assign(_$Sys_FileInput.prototype, {
	__class__: _$Sys_FileInput
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_IMap {
}
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
class haxe_Timer {
	constructor(time_ms) {
		var me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		var t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
}
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	toHex() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			var buf = new Uint8Array(s.length << 1);
			var _g = 0;
			var _g1 = s.length;
			while(_g < _g1) {
				var i = _g++;
				var c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		var a = [];
		var i1 = 0;
		while(i1 < s.length) {
			var c1 = s.charCodeAt(i1++);
			if(55296 <= c1 && c1 <= 56319) {
				c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
			}
			if(c1 <= 127) {
				a.push(c1);
			} else if(c1 <= 2047) {
				a.push(192 | c1 >> 6);
				a.push(128 | c1 & 63);
			} else if(c1 <= 65535) {
				a.push(224 | c1 >> 12);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			} else {
				a.push(240 | c1 >> 18);
				a.push(128 | c1 >> 12 & 63);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		var hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = true;
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
	static wrap(val) {
		if(((val) instanceof Error)) {
			return val;
		} else {
			return new js__$Boot_HaxeError(val);
		}
	}
}
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						var _g = [];
						{
							var _g1 = 0;
							var _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								var p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __nativeClassName(o) {
		var name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
var js_node_Fs = require("fs");
class js_node__$KeyValue_KeyValue_$Impl_$ {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_node__$KeyValue_KeyValue_$Impl_$.__name__ = true;
var js_node_Readline = require("readline");
var js_node_buffer_Buffer = require("buffer").Buffer;
class js_node_buffer__$Buffer_Helper {
	static bytesOfBuffer(b) {
		var o = Object.create(haxe_io_Bytes.prototype);
		o.length = b.byteLength;
		o.b = b;
		b.bufferValue = b;
		b.hxBytes = o;
		b.bytes = b;
		return o;
	}
}
js_node_buffer__$Buffer_Helper.__name__ = true;
var js_node_stream_PassThrough = require("stream").PassThrough;
class js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$ {
	static from(options) {
		if(!Object.prototype.hasOwnProperty.call(options,"final")) {
			Object.defineProperty(options,"final",{ get : function() {
				return options.final_;
			}});
		}
		return options;
	}
}
js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$.__name__ = true;
class js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$ {
	static _new(name,value) {
		var this1 = [name,value];
		return this1;
	}
	static get_name(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.__name__ = true;
class tink_chunk_ChunkBase {
	getCursor() {
		if(this.flattened == null) {
			this.flatten(this.flattened = []);
		}
		return tink_chunk_ChunkCursor.create(this.flattened.slice());
	}
	flatten(into) {
	}
}
tink_chunk_ChunkBase.__name__ = true;
Object.assign(tink_chunk_ChunkBase.prototype, {
	__class__: tink_chunk_ChunkBase
});
class tink_chunk_ChunkObject {
}
tink_chunk_ChunkObject.__name__ = true;
tink_chunk_ChunkObject.__isInterface__ = true;
Object.assign(tink_chunk_ChunkObject.prototype, {
	__class__: tink_chunk_ChunkObject
});
class tink__$Chunk_EmptyChunk extends tink_chunk_ChunkBase {
	constructor() {
		super();
	}
	getByte(i) {
		return 0;
	}
	getLength() {
		return 0;
	}
	slice(from,to) {
		return this;
	}
	blitTo(target,offset) {
	}
	toString() {
		return "";
	}
	toBytes() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
}
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink__$Chunk_EmptyChunk.prototype, {
	__class__: tink__$Chunk_EmptyChunk
});
class tink__$Chunk_Chunk_$Impl_$ {
	static get_length(this1) {
		return this1.getLength();
	}
	static getByte(this1,i) {
		return this1.getByte(i);
	}
	static concat(this1,that) {
		return tink_chunk_CompoundChunk.cons(this1,that);
	}
	static cursor(this1) {
		return this1.getCursor();
	}
	static iterator(this1) {
		return new tink_chunk_ChunkIterator(this1.getCursor());
	}
	static slice(this1,from,to) {
		return this1.slice(from,to);
	}
	static blitTo(this1,target,offset) {
		this1.blitTo(target,offset);
		return;
	}
	static toHex(this1) {
		return this1.toBytes().toHex();
	}
	static toString(this1) {
		return this1.toString();
	}
	static toBytes(this1) {
		return this1.toBytes();
	}
	static toBuffer(this1) {
		var b = this1.toBytes();
		var data = b.b;
		return js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
	}
	static join(chunks) {
		if(chunks == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			switch(chunks.length) {
			case 0:
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			case 1:
				var v = chunks[0];
				return v;
			default:
				var v1 = chunks;
				var ret = tink__$Chunk_Chunk_$Impl_$.catChunk(v1[0],v1[1]);
				var _g = 2;
				var _g1 = v1.length;
				while(_g < _g1) {
					var i = _g++;
					ret = tink__$Chunk_Chunk_$Impl_$.catChunk(ret,v1[i]);
				}
				return ret;
			}
		}
	}
	static ofBytes(b) {
		return tink_chunk_ByteChunk.of(b);
	}
	static ofString(s) {
		return tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s));
	}
	static ofBuffer(s) {
		return new tink_chunk_nodejs_BufferChunk(s);
	}
	static ofHex(s) {
		var length = s.length >> 1;
		var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = Std.parseInt("0x" + HxOverrides.substr(s,i * 2,2));
		}
		return tink_chunk_ByteChunk.of(bytes);
	}
	static catChunk(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.concat(a,b);
	}
	static rcatString(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(b)));
	}
	static lcatString(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(a)),b);
	}
	static lcatBytes(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(a),b);
	}
	static rcatBytes(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(b));
	}
}
tink__$Chunk_Chunk_$Impl_$.__name__ = true;
class tink_Cli {
	static exit(result) {
		switch(result._hx_index) {
		case 0:
			var _g = result.data;
			process.exit(0);
			break;
		case 1:
			var e = result.failure;
			var message = e.message;
			if(e.data != null) {
				message += ", " + Std.string(e.data);
			}
			process.stdout.write(Std.string(message));
			process.stdout.write("\n");
			var code = e.code;
			process.exit(code);
			break;
		}
	}
}
tink_Cli.__name__ = true;
class tink__$Stringly_Stringly_$Impl_$ {
	static isNumber(s,allowFloat) {
		if(s.length == 0) {
			return false;
		}
		var pos = 0;
		var max = s.length;
		if(pos < max && s.charCodeAt(pos) == 45) {
			++pos;
		}
		if(!allowFloat) {
			if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
				if(pos < max && s.charCodeAt(pos) == 120) {
					++pos;
				}
			}
		}
		while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		if(allowFloat && pos < max) {
			if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
				while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
			}
			if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
				if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
					if(pos < max && s.charCodeAt(pos) == 45) {
						++pos;
					}
				}
				while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
			}
		}
		return pos == max;
	}
	static toBool(this1) {
		if(this1 != null) {
			switch(StringTools.trim(this1).toLowerCase()) {
			case "0":case "false":case "no":
				return false;
			default:
				return true;
			}
		} else {
			return false;
		}
	}
	static isFloat(this1) {
		return tink__$Stringly_Stringly_$Impl_$.isNumber(StringTools.trim(this1),true);
	}
	static parseFloat(this1) {
		var _g = StringTools.trim(this1);
		var v = _g;
		if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,true)) {
			return tink_core_Outcome.Success(parseFloat(v));
		} else {
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid float",{ fileName : "tink/Stringly.hx", lineNumber : 64, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
		}
	}
	static toFloat(this1) {
		return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseFloat(this1));
	}
	static isInt(this1) {
		return tink__$Stringly_Stringly_$Impl_$.isNumber(StringTools.trim(this1),false);
	}
	static parseInt(this1) {
		var _g = StringTools.trim(this1);
		var v = _g;
		if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,false)) {
			return tink_core_Outcome.Success(Std.parseInt(v));
		} else {
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "tink/Stringly.hx", lineNumber : 79, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
		}
	}
	static toInt(this1) {
		return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseInt(this1));
	}
	static parseDate(this1) {
		var _g = tink__$Stringly_Stringly_$Impl_$.parseFloat(this1);
		switch(_g._hx_index) {
		case 0:
			var f = _g.data;
			return tink_core_Outcome.Success(new Date(f));
		case 1:
			var _g2 = _g.failure;
			if(!tink__$Stringly_Stringly_$Impl_$.SUPPORTED_DATE_REGEX.match(this1)) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 100, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
			}
			var date = new Date(this1);
			if(isNaN(date.getTime())) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 103, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
			} else {
				return tink_core_Outcome.Success(date);
			}
			break;
		}
	}
	static toDate(this1) {
		return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseDate(this1));
	}
	static parse(this1,f) {
		var f1 = f;
		var a1 = this1;
		return tink_core_TypedError.catchExceptions(function() {
			return f1(a1);
		},null,{ fileName : "tink/Stringly.hx", lineNumber : 163, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
	}
	static ofBool(b) {
		if(b) {
			return "true";
		} else {
			return "false";
		}
	}
	static ofInt(i) {
		if(i == null) {
			return "null";
		} else {
			return "" + i;
		}
	}
	static ofFloat(f) {
		if(f == null) {
			return "null";
		} else {
			return "" + f;
		}
	}
	static ofDate(d) {
		var f = d.getTime();
		if(f == null) {
			return "null";
		} else {
			return "" + f;
		}
	}
}
tink__$Stringly_Stringly_$Impl_$.__name__ = true;
class tink_chunk_ByteChunk extends tink_chunk_ChunkBase {
	constructor(data,from,to) {
		super();
		this.data = data;
		this.from = from;
		this.to = to;
	}
	get_wrapped() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped;
	}
	getByte(index) {
		return this.data.bytes[this.from + index];
	}
	flatten(into) {
		into.push(this);
	}
	getLength() {
		return this.to - this.from;
	}
	getSlice(from,to) {
		if(to > this.to - this.from) {
			to = this.to - this.from;
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return null;
		} else if(to == this.to - this.from && from == 0) {
			return this;
		} else {
			return new tink_chunk_ByteChunk(this.data,this.from + from,to + this.from);
		}
	}
	slice(from,to) {
		var _g = this.getSlice(from,to);
		if(_g == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			var v = _g;
			return v;
		}
	}
	blitTo(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	toBytes() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	toString() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	static of(b) {
		if(b.length == 0) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
		ret.wrapped = b;
		return ret;
	}
}
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink_chunk_ByteChunk.prototype, {
	__class__: tink_chunk_ByteChunk
});
class tink_chunk_ChunkCursor {
	constructor() {
		this.currentByte = -1;
		this.currentPos = 0;
		this.length = 0;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPartIndex = 0;
	}
	clone() {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = this.parts.slice();
		ret.curPart = this.curPart;
		ret.curPartIndex = this.curPartIndex;
		ret.curOffset = this.curOffset;
		ret.curLength = this.curLength;
		ret.length = this.length;
		ret.currentPos = this.currentPos;
		ret.currentByte = this.currentByte;
		return ret;
	}
	reset() {
		this.length = 0;
		this.currentPos = 0;
		this.currentByte = -1;
		this.curOffset = 0;
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.length += p.to - p.from;
		}
		this.curPart = this.parts[this.curPartIndex = 0];
		if(this.curPart != null) {
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		}
	}
	flush() {
		var ret = this.left();
		this.shift();
		return ret;
	}
	prune() {
		this.shift();
	}
	add(chunk) {
		chunk.flatten(this.parts);
		this.reset();
	}
	shift(chunk) {
		this.parts.splice(0,this.curPartIndex);
		var _g = this.parts[0];
		if(_g != null) {
			var chunk1 = _g;
			var _g1 = chunk1.getSlice(this.curOffset,this.curLength);
			if(_g1 == null) {
				this.parts.shift();
			} else {
				var rest = _g1;
				this.parts[0] = rest;
			}
		}
		if(chunk != null) {
			this.add(chunk);
		} else {
			this.reset();
		}
	}
	clear() {
		this.parts = [];
		this.reset();
	}
	left() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.curPartIndex;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var left = _g;
		left.push(this.curPart.slice(0,this.curOffset));
		return tink__$Chunk_Chunk_$Impl_$.join(left);
	}
	right() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = this.curPartIndex;
		var _g2 = this.parts.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var right = _g;
		if(right.length > 0) {
			right[0] = this.curPart.slice(this.curOffset,this.curLength);
		}
		return tink__$Chunk_Chunk_$Impl_$.join(right);
	}
	seek(seekable,options) {
		var _gthis = this;
		if(this.curPart == null || seekable == null || seekable.length == 0) {
			return haxe_ds_Option.None;
		}
		var max = seekable.length - 1;
		var first = seekable[0];
		var candidates = [];
		var count = 0;
		var copy = this.clone();
		copy.shift();
		var part = function(b,offset) {
			var data = b.data;
			var _g = b.from + offset;
			var _g1 = b.to;
			while(_g < _g1) {
				var i = _g++;
				var byte = data.bytes[i];
				if(candidates.length > 0) {
					var c = 0;
					while(c < count) {
						var pos = candidates[c];
						if(seekable[pos] == byte) {
							if(pos == max) {
								copy.moveTo(copy.currentPos + (i - (b.from + offset) - seekable.length + 1));
								var before = copy.left();
								var delta = before.getLength() + seekable.length;
								_gthis.moveTo(_gthis.currentPos + delta);
								if(options == null) {
									_gthis.shift();
								} else {
									var _g2 = options.withoutPruning;
									if(_g2 == null) {
										_gthis.shift();
									} else if(_g2 == false) {
										_gthis.shift();
									}
								}
								return haxe_ds_Option.Some(before);
							} else {
								candidates[c++] = pos + 1;
							}
						} else {
							count -= 1;
							var last = candidates.pop();
							if(count > c) {
								candidates[c] = last;
							}
						}
					}
				}
				if(byte == first) {
					count = candidates.push(1);
				}
			}
			copy.moveTo(copy.currentPos + (b.to - (b.from + offset)));
			return haxe_ds_Option.None;
		};
		var _g3 = part(this.curPart,this.curOffset);
		if(_g3._hx_index == 1) {
			var _g4 = this.curPartIndex + 1;
			var _g11 = this.parts.length;
			while(_g4 < _g11) {
				var i1 = _g4++;
				var _g5 = part(this.parts[i1],0);
				switch(_g5._hx_index) {
				case 0:
					var v = _g5.v;
					return haxe_ds_Option.Some(v);
				case 1:
					break;
				}
			}
			return haxe_ds_Option.None;
		} else {
			var v1 = _g3;
			return v1;
		}
	}
	sweep(len) {
		var data = this.right().slice(0,len);
		this.moveTo(this.currentPos + len);
		return data;
	}
	sweepTo(pos) {
		return this.sweep(pos - this.currentPos);
	}
	moveBy(delta) {
		return this.moveTo(this.currentPos + delta);
	}
	moveTo(position) {
		if(this.length == 0) {
			return 0;
		}
		if(position > this.length) {
			position = this.length - 1;
		}
		if(position < 0) {
			position = 0;
		}
		this.currentPos = position;
		if(position == this.length) {
			this.ffwd();
		} else {
			var _g = 0;
			var _g1 = this.parts.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.parts[i];
				var _g2 = c.to - c.from;
				var enough = _g2;
				if(enough > position) {
					this.curPart = c;
					this.curPartIndex = i;
					this.curOffset = position;
					this.curLength = c.to - c.from;
					this.currentByte = c.data.bytes[c.from + position];
					break;
				} else {
					var v = _g2;
					position -= v;
				}
			}
		}
		return this.currentPos;
	}
	ffwd() {
		this.currentByte = -1;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPart = null;
		this.curPartIndex = this.parts.length;
	}
	next() {
		if(this.currentPos == this.length) {
			return false;
		}
		this.currentPos++;
		if(this.currentPos == this.length) {
			this.ffwd();
			return false;
		}
		if(this.curOffset == this.curLength - 1) {
			this.curOffset = 0;
			this.curPart = this.parts[++this.curPartIndex];
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		} else {
			var _this2 = this.curPart;
			this.currentByte = _this2.data.bytes[_this2.from + ++this.curOffset];
		}
		return true;
	}
	static create(parts) {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = parts;
		ret.reset();
		return ret;
	}
}
tink_chunk_ChunkCursor.__name__ = true;
Object.assign(tink_chunk_ChunkCursor.prototype, {
	__class__: tink_chunk_ChunkCursor
});
class tink_chunk_ChunkIterator {
	constructor(target) {
		this.target = target;
		this._hasNext = target.length > target.currentPos;
	}
	hasNext() {
		return this._hasNext;
	}
	next() {
		var ret = this.target.currentByte;
		this._hasNext = this.target.next();
		return ret;
	}
}
tink_chunk_ChunkIterator.__name__ = true;
Object.assign(tink_chunk_ChunkIterator.prototype, {
	__class__: tink_chunk_ChunkIterator
});
class tink_chunk_CompoundChunk extends tink_chunk_ChunkBase {
	constructor() {
		super();
	}
	getByte(i) {
		var index = this.findChunk(i);
		return this.chunks[index].getByte(i - this.offsets[index]);
	}
	getLength() {
		return this.length;
	}
	findChunk(target) {
		var min = 0;
		var max = this.offsets.length - 1;
		while(min + 1 < max) {
			var guess = min + max >> 1;
			if(this.offsets[guess] > target) {
				max = guess;
			} else {
				min = guess;
			}
		}
		return min;
	}
	flatten(into) {
		var _g = 0;
		var _g1 = this.chunks;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.flatten(into);
		}
	}
	slice(from,to) {
		var idxFrom = this.findChunk(from);
		var idxTo = this.findChunk(to);
		if(idxFrom == idxTo) {
			var offset = this.offsets[idxFrom];
			return this.chunks[idxFrom].slice(from - offset,to - offset);
		}
		var ret = this.chunks.slice(idxFrom,idxTo + 1);
		var c = ret[0];
		ret[0] = c.slice(from - this.offsets[idxFrom],this.offsets[idxFrom + 1]);
		var c1 = ret[ret.length - 1];
		ret[ret.length - 1] = c1.slice(0,to - this.offsets[idxTo]);
		return tink_chunk_CompoundChunk.create(ret,this.depth);
	}
	blitTo(target,offset) {
		var _g = 0;
		var _g1 = this.chunks.length;
		while(_g < _g1) {
			var i = _g++;
			this.chunks[i].blitTo(target,offset + this.offsets[i]);
		}
	}
	toString() {
		return this.toBytes().toString();
	}
	toBytes() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
	static asCompound(c) {
		return ((c) instanceof tink_chunk_CompoundChunk) ? c : null;
	}
	static cons(a,b) {
		var _g = b.getLength();
		var _g1 = a.getLength();
		if(_g1 == 0) {
			if(_g == 0) {
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			} else {
				return b;
			}
		} else if(_g == 0) {
			return a;
		} else {
			var la = _g1;
			var lb = _g;
			var _g2 = tink_chunk_CompoundChunk.asCompound(b);
			var _g11 = tink_chunk_CompoundChunk.asCompound(a);
			if(_g11 == null) {
				if(_g2 == null) {
					return tink_chunk_CompoundChunk.create([a,b],2);
				} else {
					var v = _g2;
					if(v.depth < 100) {
						return tink_chunk_CompoundChunk.create([a,b],v.depth + 1);
					} else {
						var flat = [];
						v.flatten(flat);
						b.flatten(flat);
						return tink_chunk_CompoundChunk.create(flat,2);
					}
				}
			} else if(_g2 == null) {
				var v1 = _g11;
				if(v1.depth < 100) {
					return tink_chunk_CompoundChunk.create([a,b],v1.depth + 1);
				} else {
					var flat1 = [];
					v1.flatten(flat1);
					b.flatten(flat1);
					return tink_chunk_CompoundChunk.create(flat1,2);
				}
			} else {
				var a1 = _g11;
				var b1 = _g2;
				var depth = a1.depth > b1.depth ? a1.depth : b1.depth;
				return tink_chunk_CompoundChunk.create(a1.chunks.concat(b1.chunks),depth);
			}
		}
	}
	static create(chunks,depth) {
		var ret = new tink_chunk_CompoundChunk();
		var offsets = [0];
		var length = 0;
		var _g = 0;
		while(_g < chunks.length) {
			var c = chunks[_g];
			++_g;
			offsets.push(length += c.getLength());
		}
		ret.chunks = chunks;
		ret.offsets = offsets;
		ret.length = length;
		ret.depth = depth;
		return ret;
	}
}
tink_chunk_CompoundChunk.__name__ = true;
tink_chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink_chunk_CompoundChunk.prototype, {
	__class__: tink_chunk_CompoundChunk
});
class tink_chunk__$Seekable_Seekable_$Impl_$ {
	static _new(a) {
		var this1 = a;
		return this1;
	}
	static get_length(this1) {
		return this1.length;
	}
	static get(this1,index) {
		return this1[index];
	}
	static ofChunk(c) {
		return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(c.toBytes());
	}
	static ofBytes(b) {
		var _g = [];
		var _g1 = 0;
		var _g2 = b.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(b.b[i]);
		}
		var this1 = _g;
		return this1;
	}
	static ofString(s) {
		return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(haxe_io_Bytes.ofString(s));
	}
}
tink_chunk__$Seekable_Seekable_$Impl_$.__name__ = true;
class tink_chunk_nodejs_BufferChunk {
	constructor(buffer) {
		this.buffer = buffer;
	}
	getByte(i) {
		return this.buffer[i];
	}
	getCursor() {
		return tink_chunk_ByteChunk.of(this.toBytes()).getCursor();
	}
	flatten(into) {
		tink_chunk_ByteChunk.of(this.toBytes()).flatten(into);
	}
	getLength() {
		return this.buffer.length;
	}
	slice(from,to) {
		if(to > this.getLength()) {
			to = this.getLength();
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else if(to == this.getLength() && from == 0) {
			return this;
		} else {
			return new tink_chunk_nodejs_BufferChunk(this.buffer.slice(from,to));
		}
	}
	toString() {
		return this.buffer.toString();
	}
	toBytes() {
		var copy = tink_chunk_nodejs_BufferChunk.alloc(this.buffer.length);
		this.buffer.copy(copy);
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(copy);
	}
	blitTo(target,offset) {
		var data = target.b;
		this.buffer.copy(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,target.length),offset);
		return;
	}
}
tink_chunk_nodejs_BufferChunk.__name__ = true;
tink_chunk_nodejs_BufferChunk.__interfaces__ = [tink_chunk_ChunkObject];
Object.assign(tink_chunk_nodejs_BufferChunk.prototype, {
	__class__: tink_chunk_nodejs_BufferChunk
});
class tink_cli_Doc0 {
	static get() {
		if(tink_cli_Doc0.doc == null) {
			tink_cli_Doc0.doc = { doc : " Find the instances of an executable in the system path. ", commands : [{ isDefault : true, isSub : false, names : [], doc : " Executes this program. "}], flags : [{ names : ["--all"], aliases : ["a"], doc : " List all instances of executables found (instead of just the first one). "},{ names : ["--help"], aliases : ["h"], doc : " Output usage information. "},{ names : ["--silent"], aliases : ["s"], doc : " Silence the output, just return the exit code (0 if any executable is found, otherwise 1). "},{ names : ["--version"], aliases : ["v"], doc : " Output the version number. "}]};
		}
		return tink_cli_Doc0.doc;
	}
}
tink_cli_Doc0.__name__ = true;
class tink_cli_DocFormatter {
}
tink_cli_DocFormatter.__name__ = true;
tink_cli_DocFormatter.__isInterface__ = true;
Object.assign(tink_cli_DocFormatter.prototype, {
	__class__: tink_cli_DocFormatter
});
class tink_cli_Prompt {
}
tink_cli_Prompt.__name__ = true;
tink_cli_Prompt.__isInterface__ = true;
Object.assign(tink_cli_Prompt.prototype, {
	__class__: tink_cli_Prompt
});
class tink_cli__$Prompt_PromptType_$Impl_$ {
	static ofString(v) {
		return tink_cli_PromptTypeBase.Simple(v);
	}
}
tink_cli__$Prompt_PromptType_$Impl_$.__name__ = true;
var tink_cli_PromptTypeBase = $hxEnums["tink.cli.PromptTypeBase"] = { __ename__ : true, __constructs__ : ["Simple","MultipleChoices","Secure"]
	,Simple: ($_=function(prompt) { return {_hx_index:0,prompt:prompt,__enum__:"tink.cli.PromptTypeBase",toString:$estr}; },$_.__params__ = ["prompt"],$_)
	,MultipleChoices: ($_=function(prompt,choices) { return {_hx_index:1,prompt:prompt,choices:choices,__enum__:"tink.cli.PromptTypeBase",toString:$estr}; },$_.__params__ = ["prompt","choices"],$_)
	,Secure: ($_=function(prompt) { return {_hx_index:2,prompt:prompt,__enum__:"tink.cli.PromptTypeBase",toString:$estr}; },$_.__params__ = ["prompt"],$_)
};
class tink_cli__$Rest_Rest_$Impl_$ {
	static asArray(this1) {
		return this1;
	}
}
tink_cli__$Rest_Rest_$Impl_$.__name__ = true;
class tink_cli_Router {
	constructor(command,prompt,hasFlags) {
		this.command = command;
		this.prompt = prompt;
		this.hasFlags = hasFlags;
	}
	process(args) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	}
	processArgs(args) {
		var _gthis = this;
		if(!this.hasFlags) {
			return tink_core_Outcome.Success(args);
		} else {
			return tink_core_TypedError.catchExceptions(function() {
				var args1 = tink_cli_Router.expandAssignments(args);
				var rest = [];
				var i = 0;
				var flagsEnded = false;
				while(i < args1.length) {
					var arg = args1[i];
					if(arg == "--") {
						flagsEnded = true;
						++i;
					} else if(!flagsEnded && HxOverrides.cca(arg,0) == 45) {
						var _g = _gthis.processFlag(args1,i);
						if(_g == -1) {
							if(HxOverrides.cca(arg,1) != 45) {
								var _g1 = _gthis.processAlias(args1,i);
								if(_g1 == -1) {
									throw new js__$Boot_HaxeError("Unrecognized alias \"" + arg + "\"");
								} else {
									var v = _g1;
									i += v + 1;
								}
							} else {
								throw new js__$Boot_HaxeError("Unrecognized flag \"" + arg + "\"");
							}
						} else {
							var v1 = _g;
							i += v1 + 1;
						}
					} else {
						rest.push(arg);
						++i;
					}
				}
				return rest;
			},null,{ fileName : "tink/cli/Router.hx", lineNumber : 25, className : "tink.cli.Router", methodName : "processArgs"});
		}
	}
	processFlag(args,index) {
		return -1;
	}
	processAlias(args,index) {
		return -1;
	}
	promptRequired() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	}
	static expandAssignments(args) {
		var ret = [];
		var flags = true;
		var _g = 0;
		while(_g < args.length) {
			var arg = args[_g];
			++_g;
			if(arg == "--") {
				flags = false;
			}
			if(!flags) {
				ret.push(arg);
			} else {
				var _g1 = arg.indexOf("=");
				var _g11 = HxOverrides.cca(arg,1);
				var _g2 = HxOverrides.cca(arg,0);
				if(_g2 == null) {
					ret.push(arg);
				} else if(_g2 == 45) {
					if(_g11 == null) {
						ret.push(arg);
					} else if(_g11 == 45) {
						var i = _g1;
						if(i != -1) {
							ret.push(HxOverrides.substr(arg,0,i));
							ret.push(HxOverrides.substr(arg,i + 1,null));
						} else {
							ret.push(arg);
						}
					} else {
						ret.push(arg);
					}
				} else {
					ret.push(arg);
				}
			}
		}
		return ret;
	}
}
tink_cli_Router.__name__ = true;
Object.assign(tink_cli_Router.prototype, {
	__class__: tink_cli_Router
});
class tink_cli_Router0 extends tink_cli_Router {
	constructor(command,prompt) {
		super(command,prompt,true);
	}
	process(args) {
		var _gthis = this;
		if(args[0] == null) {
			var args1;
			var _g = this.processArgs(args);
			switch(_g._hx_index) {
			case 0:
				var args2 = _g.data;
				args1 = args2;
				break;
			case 1:
				var f = _g.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
			}
			return tink_core__$Promise_Promise_$Impl_$.next(this.promptRequired(),function(_) {
				return _gthis.run_run(args1);
			});
		} else {
			var args3;
			var _g1 = this.processArgs(args);
			switch(_g1._hx_index) {
			case 0:
				var args4 = _g1.data;
				args3 = args4;
				break;
			case 1:
				var f1 = _g1.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
			return tink_core__$Promise_Promise_$Impl_$.next(this.promptRequired(),function(_1) {
				return _gthis.run_run(args3);
			});
		}
	}
	processFlag(args,index) {
		var current = index;
		switch(args[index]) {
		case "--all":
			this.command.all = true;
			break;
		case "--help":
			this.command.help = true;
			break;
		case "--silent":
			this.command.silent = true;
			break;
		case "--version":
			this.command.version = true;
			break;
		default:
			return -1;
		}
		return current - index;
	}
	processAlias(args,index) {
		var current = index;
		var str = args[index];
		var _g = 1;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(str,i);
			if(_g2 == null) {
				throw new js__$Boot_HaxeError("Invalid alias '-" + str.charAt(i) + "'");
			} else {
				switch(_g2) {
				case 97:
					this.command.all = true;
					break;
				case 104:
					this.command.help = true;
					break;
				case 115:
					this.command.silent = true;
					break;
				case 118:
					this.command.version = true;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid alias '-" + str.charAt(i) + "'");
				}
			}
		}
		return current - index;
	}
	promptRequired() {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			cb(tink_core_Outcome.Success(tink_core_Noise.Noise));
		});
	}
	run_run(args) {
		if(args.length < 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(null,"Insufficient arguments. Expected: " + 0 + ", Got: " + args.length,{ fileName : "src/which/Program.hx", lineNumber : 41, className : "tink.cli.Router0", methodName : "run_run"}))));
		}
		this.command.run(args.slice(0,args.length));
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	}
}
tink_cli_Router0.__name__ = true;
tink_cli_Router0.__super__ = tink_cli_Router;
Object.assign(tink_cli_Router0.prototype, {
	__class__: tink_cli_Router0
});
class tink_cli_doc_DefaultFormatter {
	constructor(root) {
		this.re = new EReg("^\\s*\\*?\\s{0,2}(.*)$","");
		this.root = root;
	}
	format(spec) {
		var out_b = "";
		var _gthis = this;
		out_b += "\n";
		var _g = this.formatDoc(spec.doc);
		if(_g != null) {
			var doc = _g;
			out_b += Std.string("" + doc + "\n" + "\n");
		}
		var _g1 = [];
		var _g11 = 0;
		var _g2 = spec.commands;
		while(_g11 < _g2.length) {
			var v = _g2[_g11];
			++_g11;
			if(!v.isDefault) {
				_g1.push(v);
			}
		}
		var subs = _g1;
		if(this.root != null) {
			out_b += Std.string("  Usage: " + this.root + "\n");
		}
		var _g12 = Lambda.find(spec.commands,function(c) {
			return c.isDefault;
		});
		if(_g12 != null) {
			var defaultCommand = _g12;
			var _g13 = this.formatDoc(defaultCommand.doc);
			if(_g13 != null) {
				var doc1 = _g13;
				out_b += Std.string(this.indent(doc1,4) + "\n" + "\n");
			}
		}
		if(subs.length > 0) {
			var maxCommandLength = Lambda.fold(subs,function(command,max) {
				var _g21 = 0;
				var _g3 = command.names;
				while(_g21 < _g3.length) {
					var name = _g3[_g21];
					++_g21;
					if(name.length > max) {
						max = name.length;
					}
				}
				return max;
			},0);
			if(this.root != null) {
				out_b += Std.string("  Usage: " + this.root + " <subcommand>" + "\n");
			}
			out_b += Std.string("    Subcommands:" + "\n");
			var addCommand = function(name1,doc2) {
				if(doc2 == null) {
					doc2 = "(doc missing)";
				}
				var v1 = StringTools.lpad(name1," ",maxCommandLength) + " : " + StringTools.trim(_gthis.indent(doc2,maxCommandLength + 3));
				out_b += Std.string(_gthis.indent(v1,6) + "\n");
			};
			var _g22 = 0;
			while(_g22 < subs.length) {
				var command1 = subs[_g22];
				++_g22;
				var name2 = command1.names[0];
				addCommand(name2,this.formatDoc(command1.doc));
				if(command1.names.length > 1) {
					var _g23 = 1;
					var _g31 = command1.names.length;
					while(_g23 < _g31) {
						var i = _g23++;
						addCommand(command1.names[i],"Alias of " + name2);
					}
				}
			}
		}
		if(spec.flags.length > 0) {
			var nameOf = function(flag) {
				var variants = flag.names.join(", ");
				if(flag.aliases.length > 0) {
					var _this = flag.aliases;
					var result = new Array(_this.length);
					var _g4 = 0;
					var _g14 = _this.length;
					while(_g4 < _g14) {
						var i1 = _g4++;
						result[i1] = "-" + _this[i1];
					}
					variants += ", " + result.join(", ");
				}
				return variants;
			};
			var maxFlagLength = Lambda.fold(spec.flags,function(flag1,max1) {
				var name3 = nameOf(flag1);
				if(name3.length > max1) {
					max1 = name3.length;
				}
				return max1;
			},0);
			var addFlag = function(name4,doc3) {
				if(doc3 == null) {
					doc3 = "";
				}
				var v2 = StringTools.lpad(name4," ",maxFlagLength) + " : " + StringTools.trim(_gthis.indent(doc3,maxFlagLength + 3));
				out_b += Std.string(_gthis.indent(v2,6) + "\n");
			};
			out_b += "\n";
			out_b += Std.string("  Flags:" + "\n");
			var _g24 = 0;
			var _g32 = spec.flags;
			while(_g24 < _g32.length) {
				var flag2 = _g32[_g24];
				++_g24;
				addFlag(nameOf(flag2),this.formatDoc(flag2.doc));
			}
		}
		return out_b;
	}
	indent(v,level) {
		var _this = v.split("\n");
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = StringTools.lpad(""," ",level) + _this[i];
		}
		return result.join("\n");
	}
	formatDoc(doc) {
		var _gthis = this;
		if(doc == null) {
			return null;
		}
		var _this = doc.split("\n");
		var f = StringTools.trim;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(_this[i]);
		}
		var lines = result;
		while(lines[0] == "") lines = lines.slice(1);
		while(lines[lines.length - 1] == "") lines.pop();
		var result1 = new Array(lines.length);
		var _g2 = 0;
		var _g11 = lines.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var line = lines[i1];
			result1[i1] = _gthis.re.match(line) ? _gthis.re.matched(1) : line;
		}
		return result1.join("\n");
	}
}
tink_cli_doc_DefaultFormatter.__name__ = true;
tink_cli_doc_DefaultFormatter.__interfaces__ = [tink_cli_DocFormatter];
Object.assign(tink_cli_doc_DefaultFormatter.prototype, {
	__class__: tink_cli_doc_DefaultFormatter
});
class tink_cli_macro_Router {
}
tink_cli_macro_Router.__name__ = true;
class tink_cli_prompt_IoPrompt {
	constructor(source,sink) {
		this.source = source;
		this.sink = sink;
	}
	print(v) {
		var ret = tink_io__$Source_Source_$Impl_$.pipeTo(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(v)))),this.sink).map(function(r) {
			if(r._hx_index == 0) {
				return tink_core_Outcome.Success(tink_core_Noise.Noise);
			} else {
				return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Pipe Error",r,{ fileName : "tink/cli/prompt/IoPrompt.hx", lineNumber : 24, className : "tink.cli.prompt.IoPrompt", methodName : "print"}));
			}
		});
		return ret.gather();
	}
	println(v) {
		return this.print("" + v + "\n");
	}
	prompt(type) {
		var secure = false;
		var _gthis = this;
		var display;
		switch(type._hx_index) {
		case 0:
			var v = type.prompt;
			display = "" + v + ": ";
			break;
		case 1:
			var c = type.choices;
			var v1 = type.prompt;
			display = "" + v1 + " [" + c.join("/") + "]: ";
			break;
		case 2:
			var v2 = type.prompt;
			secure = true;
			display = "" + v2 + ": ";
			break;
		}
		var ret = tink_io__$Source_Source_$Impl_$.pipeTo(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(display)))),this.sink).flatMap(function(o) {
			if(o._hx_index == 0) {
				if(secure) {
					return _gthis.secureInput(display);
				} else {
					var split = tink_io_RealSourceTools.split(_gthis.source,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("\n")));
					_gthis.source = split.after;
					return tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(split.before),function(chunk) {
						var s = chunk.toString();
						if(HxOverrides.cca(s,s.length - 1) == 13) {
							return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(HxOverrides.substr(s,0,s.length - 1))));
						} else {
							return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(s)));
						}
					}));
				}
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(null,"",{ fileName : "tink/cli/prompt/IoPrompt.hx", lineNumber : 54, className : "tink.cli.prompt.IoPrompt", methodName : "prompt"}))));
			}
		});
		return ret.gather();
	}
	secureInput(prompt) {
		throw new js__$Boot_HaxeError("not implemented");
	}
}
tink_cli_prompt_IoPrompt.__name__ = true;
tink_cli_prompt_IoPrompt.__interfaces__ = [tink_cli_Prompt];
Object.assign(tink_cli_prompt_IoPrompt.prototype, {
	__class__: tink_cli_prompt_IoPrompt
});
class tink_cli_prompt_NodePrompt extends tink_cli_prompt_IoPrompt {
	constructor() {
		var r = process.stdin;
		var options = null;
		if(options == null) {
			options = { };
		}
		super(tink_io_nodejs_NodejsSource.wrap("stdin",r,options.chunkSize,options.onEnd),tink_io_nodejs_NodejsSink.wrap("stdout",process.stdout));
	}
	secureInput(prompt) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var rl = js_node_Readline.createInterface({ input : process.stdin, output : process.stdout});
			var hidden = function(query,callback) {
				var stdin = process.openStdin();
				process.stdin.on("data",function(buf) {
					var char = buf.toString();
					switch(char) {
					case "\x04":case "\n":case "\r":
						stdin.pause();
						break;
					default:
						process.stdout.write("\x1B[2K\x1B[200D" + query);
					}
				});
				rl.question(query,function(value) {
					rl.history = rl.history.slice(1);
					callback(value);
				});
			};
			hidden(prompt,function(password) {
				cb(tink_core_Outcome.Success(password));
			});
		});
	}
}
tink_cli_prompt_NodePrompt.__name__ = true;
tink_cli_prompt_NodePrompt.__super__ = tink_cli_prompt_IoPrompt;
Object.assign(tink_cli_prompt_NodePrompt.prototype, {
	__class__: tink_cli_prompt_NodePrompt
});
class tink_cli_prompt_RetryPrompt {
	constructor(trials,proxy) {
		this.trials = trials;
		this.proxy = proxy == null ? new tink_cli_prompt_NodePrompt() : proxy;
	}
	print(v) {
		return this.proxy.print(v);
	}
	println(v) {
		return this.proxy.println(v);
	}
	prompt(type) {
		var _gthis = this;
		switch(type._hx_index) {
		case 0:
			var _g2 = type.prompt;
			return this.proxy.prompt(type);
		case 1:
			var c = type.choices;
			var v = type.prompt;
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var remaining = _gthis.trials;
				var next = null;
				next = function() {
					remaining -= 1;
					var retry = function() {
						if(remaining > 0) {
							next();
						} else {
							var retry1 = tink_core_Outcome.Failure(new tink_core_TypedError(null,"Maximum retries reached",{ fileName : "tink/cli/prompt/RetryPrompt.hx", lineNumber : 36, className : "tink.cli.prompt.RetryPrompt", methodName : "prompt"}));
							cb(retry1);
						}
					};
					_gthis.proxy.prompt(type).handle(function(o) {
						switch(o._hx_index) {
						case 0:
							var result = o.data;
							if(c.indexOf(result) == -1) {
								retry();
							} else {
								cb(tink_core_Outcome.Success(result));
							}
							break;
						case 1:
							var f = o.failure;
							retry();
							break;
						}
					});
				};
				next();
			});
		case 2:
			var _g3 = type.prompt;
			return this.proxy.prompt(type);
		}
	}
}
tink_cli_prompt_RetryPrompt.__name__ = true;
tink_cli_prompt_RetryPrompt.__interfaces__ = [tink_cli_Prompt];
Object.assign(tink_cli_prompt_RetryPrompt.prototype, {
	__class__: tink_cli_prompt_RetryPrompt
});
class tink_core_Annex {
	constructor(target) {
		this.target = target;
		this.registry = new haxe_ds_ObjectMap();
	}
}
tink_core_Annex.__name__ = true;
Object.assign(tink_core_Annex.prototype, {
	__class__: tink_core_Annex
});
class tink_core__$Callback_Callback_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static toFunction(this1) {
		return this1;
	}
	static invoke(this1,data) {
		if(tink_core__$Callback_Callback_$Impl_$.depth < 500) {
			tink_core__$Callback_Callback_$Impl_$.depth++;
			this1(data);
			tink_core__$Callback_Callback_$Impl_$.depth--;
		} else {
			var _e = this1;
			var f = function(data1) {
				tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
			};
			var data2 = data;
			tink_core__$Callback_Callback_$Impl_$.defer(function() {
				f(data2);
			});
		}
	}
	static ignore(cb) {
		return function(_) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,tink_core_Noise.Noise);
		};
	}
	static fromNiladic(f) {
		return f;
	}
	static fromMany(callbacks) {
		return function(v) {
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				tink_core__$Callback_Callback_$Impl_$.invoke(callback,v);
			}
		};
	}
	static defer(f) {
		process.nextTick(f);
	}
}
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
class tink_core_LinkObject {
}
tink_core_LinkObject.__name__ = true;
tink_core_LinkObject.__isInterface__ = true;
Object.assign(tink_core_LinkObject.prototype, {
	__class__: tink_core_LinkObject
});
class tink_core__$Callback_CallbackLink_$Impl_$ {
	static _new(link) {
		var this1 = new tink_core_SimpleLink(link);
		return this1;
	}
	static cancel(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static dissolve(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static noop() {
	}
	static toFunction(this1) {
		if(this1 == null) {
			return tink_core__$Callback_CallbackLink_$Impl_$.noop;
		} else {
			return $bind(this1,this1.cancel);
		}
	}
	static toCallback(this1) {
		return function(_) {
			this1.cancel();
		};
	}
	static fromFunction(f) {
		var this1 = new tink_core_SimpleLink(f);
		return this1;
	}
	static join(a,b) {
		return new tink_core__$Callback_LinkPair(a,b);
	}
	static fromMany(callbacks) {
		var this1 = new tink_core_SimpleLink(function() {
			if(callbacks != null) {
				var _g = 0;
				while(_g < callbacks.length) {
					var cb = callbacks[_g];
					++_g;
					if(cb != null) {
						cb.cancel();
					}
				}
			} else {
				callbacks = null;
			}
		});
		return this1;
	}
}
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = true;
class tink_core_SimpleLink {
	constructor(f) {
		this.f = f;
	}
	cancel() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
}
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core_SimpleLink.prototype, {
	__class__: tink_core_SimpleLink
});
class tink_core__$Callback_LinkPair {
	constructor(a,b) {
		this.dissolved = false;
		this.a = a;
		this.b = b;
	}
	cancel() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
}
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_LinkPair.prototype, {
	__class__: tink_core__$Callback_LinkPair
});
class tink_core__$Callback_ListCell {
	constructor(cb,list) {
		if(cb == null) {
			throw new js__$Boot_HaxeError("callback expected but null received");
		}
		this.cb = cb;
		this.list = list;
	}
	invoke(data) {
		if(this.list != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(this.cb,data);
		}
	}
	clear() {
		this.cb = null;
		this.list = null;
	}
	cancel() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
}
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_ListCell.prototype, {
	__class__: tink_core__$Callback_ListCell
});
class tink_core_CallbackList {
	constructor() {
		this.busy = false;
		this.queue = [];
		this.used = 0;
		this.cells = [];
	}
	ondrain() {
	}
	get_length() {
		return this.used;
	}
	release() {
		if(--this.used < this.used >> 1) {
			this.compact();
		}
	}
	add(cb) {
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		this.used++;
		return node;
	}
	invoke(data,destructive) {
		if(this.busy) {
			var f = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				f(data1,destructive1);
				return;
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core__$Callback_Callback_$Impl_$.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g2 = 0;
				var _g3 = length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var _this1 = this.cells[i1];
					_this1.cb = null;
					_this1.list = null;
				}
				var _g4 = 0;
				var _g5 = added;
				while(_g4 < _g5) {
					var i2 = _g4++;
					this.cells[i2] = this.cells[length + i2];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	compact() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g21 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	resize(length) {
		this.cells.length = length;
	}
	clear() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
}
tink_core_CallbackList.__name__ = true;
Object.assign(tink_core_CallbackList.prototype, {
	__class__: tink_core_CallbackList
});
class tink_core_TypedError {
	constructor(code,message,pos) {
		if(code == null) {
			code = 500;
		}
		this.isTinkError = true;
		this.code = code;
		this.message = message;
		this.pos = pos;
		this.exceptionStack = [];
		this.callStack = [];
	}
	printPos() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	toString() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	throwSelf() {
		var any = this;
		throw js__$Boot_HaxeError.wrap(any);
	}
	static withData(code,message,data,pos) {
		return tink_core_TypedError.typed(code,message,data,pos);
	}
	static typed(code,message,data,pos) {
		var ret = new tink_core_TypedError(code,message,pos);
		ret.data = data;
		return ret;
	}
	static ofJsError(e,pos) {
		return tink_core_TypedError.withData(500,e.message,e,pos);
	}
	static asError(v) {
		if(v != null && v.isTinkError) {
			return v;
		} else {
			return null;
		}
	}
	static catchExceptions(f,report,pos) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			var _g = tink_core_TypedError.asError(e1);
			var tmp;
			if(_g == null) {
				tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
			} else {
				var e2 = _g;
				tmp = e2;
			}
			return tink_core_Outcome.Failure(tmp);
		}
	}
	static reporter(code,message,pos) {
		return function(e) {
			return tink_core_TypedError.withData(code,message,e,pos);
		};
	}
	static rethrow(any) {
		throw js__$Boot_HaxeError.wrap(any);
	}
	static tryFinally(f,cleanup) {
		try { return f(); } finally { cleanup(); }
		return null;
	}
}
tink_core_TypedError.__name__ = true;
Object.assign(tink_core_TypedError.prototype, {
	__class__: tink_core_TypedError
});
class tink_core__$Error_Stack_$Impl_$ {
	static toString(this1) {
		return "Error stack not available. Compile with -D error_stack.";
	}
}
tink_core__$Error_Stack_$Impl_$.__name__ = true;
class tink_core_FutureObject {
}
tink_core_FutureObject.__name__ = true;
tink_core_FutureObject.__isInterface__ = true;
Object.assign(tink_core_FutureObject.prototype, {
	__class__: tink_core_FutureObject
});
class tink_core__$Future_NeverFuture {
	constructor() {
	}
	map(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	flatMap(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	handle(callback) {
		return null;
	}
	gather() {
		return tink_core__$Future_NeverFuture.inst;
	}
	eager() {
		return tink_core__$Future_NeverFuture.inst;
	}
}
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_NeverFuture.prototype, {
	__class__: tink_core__$Future_NeverFuture
});
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
class tink_core__$Lazy_LazyObject {
}
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.__isInterface__ = true;
Object.assign(tink_core__$Lazy_LazyObject.prototype, {
	__class__: tink_core__$Lazy_LazyObject
});
class tink_core__$Lazy_LazyConst {
	constructor(value) {
		this.value = value;
	}
	get() {
		return this.value;
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	flatMap(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
}
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyConst.prototype, {
	__class__: tink_core__$Lazy_LazyConst
});
class tink_core__$Future_SyncFuture {
	constructor(value) {
		this.value = value;
	}
	map(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	flatMap(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var tmp = _gthis.value.get();
			return f(tmp).handle($yield);
		});
	}
	handle(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	eager() {
		return this;
	}
	gather() {
		return this;
	}
}
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_SyncFuture.prototype, {
	__class__: tink_core__$Future_SyncFuture
});
class tink_core__$Future_Future_$Impl_$ {
	static _new(f) {
		var this1 = new tink_core__$Future_SuspendableFuture(f);
		return this1;
	}
	static first(this1,other) {
		var ret = new tink_core_FutureTrigger();
		var l1 = this1.handle($bind(ret,ret.trigger));
		var l2 = other.handle($bind(ret,ret.trigger));
		var ret1 = ret;
		if(l1 != null) {
			var this2 = l1;
			ret1.handle(function(_) {
				this2.cancel();
			});
		}
		if(l2 != null) {
			var this3 = l2;
			ret1.handle(function(_1) {
				this3.cancel();
			});
		}
		return ret1;
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.map(f);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatMap(this1,next,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.flatMap(next);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static next(this1,n) {
		return this1.flatMap(function(v) {
			return n(v);
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		var gather1 = gather;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret = this1.flatMap(function(t) {
			var gather2 = false;
			if(gather2 == null) {
				gather2 = true;
			}
			var ret1 = other.map(function(a) {
				return merger(t,a);
			});
			if(gather2) {
				return ret1.gather();
			} else {
				return ret1;
			}
		});
		if(gather1) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatten(f) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var inner = null;
			var outer = f.handle(function(second) {
				inner = second.handle($yield);
			});
			var this1 = new tink_core_SimpleLink(function() {
				if(inner != null) {
					inner.cancel();
				}
			});
			return new tink_core__$Callback_LinkPair(outer,this1);
		});
	}
	static ofJsPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			promise.then(function(a) {
				cb(tink_core_Outcome.Success(a));
			}).catch(function(e) {
				var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
				cb(tmp);
			});
		});
	}
	static ofAny(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static asPromise(s) {
		return s;
	}
	static ofMany(futures,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
		var _g = 0;
		while(_g < futures.length) {
			var f = [futures[_g]];
			++_g;
			var gather1 = false;
			if(gather1 == null) {
				gather1 = true;
			}
			var ret1 = ret.flatMap((function(f1) {
				return function(results) {
					var gather2 = false;
					if(gather2 == null) {
						gather2 = true;
					}
					var ret2 = (function() {
						return function(result) {
							return results.concat([result]);
						};
					})();
					var ret3 = f1[0].map(ret2);
					if(gather2) {
						return ret3.gather();
					} else {
						return ret3;
					}
				};
			})(f));
			ret = gather1 ? ret1.gather() : ret1;
		}
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static fromMany(futures) {
		return tink_core__$Future_Future_$Impl_$.ofMany(futures);
	}
	static lazy(l) {
		return new tink_core__$Future_SyncFuture(l);
	}
	static sync(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static isFuture(maybeFuture) {
		return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
	}
	static async(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		if(lazy) {
			return new tink_core__$Future_SuspendableFuture(function($yield) {
				f($yield);
				return null;
			});
		} else {
			var op = new tink_core_FutureTrigger();
			var wrapped = f;
			tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
			return op;
		}
	}
	static or(a,b) {
		return tink_core__$Future_Future_$Impl_$.first(a,b);
	}
	static either(a,b) {
		var gather = false;
		if(gather == null) {
			gather = true;
		}
		var ret = a.map(haxe_ds_Either.Left);
		var tmp = gather ? ret.gather() : ret;
		var gather1 = false;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret1 = b.map(haxe_ds_Either.Right);
		return tink_core__$Future_Future_$Impl_$.first(tmp,gather1 ? ret1.gather() : ret1);
	}
	static and(a,b) {
		return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
			var this1 = new tink_core_MPair(a1,b1);
			return this1;
		});
	}
	static _tryFailingFlatMap(f,map) {
		var ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return map(d);
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		return ret.gather();
	}
	static _tryFlatMap(f,map) {
		var ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				var ret1 = map(d).map(tink_core_Outcome.Success);
				return ret1.gather();
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		return ret.gather();
	}
	static _tryFailingMap(f,map) {
		var ret = f.map(function(o) {
			return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
		});
		return ret.gather();
	}
	static _tryMap(f,map) {
		var ret = f.map(function(o) {
			return tink_core_OutcomeTools.map(o,map);
		});
		return ret.gather();
	}
	static _flatMap(f,map) {
		var ret = f.flatMap(map);
		return ret.gather();
	}
	static _map(f,map) {
		var ret = f.map(map);
		return ret.gather();
	}
	static trigger() {
		return new tink_core_FutureTrigger();
	}
	static delay(ms,value) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			haxe_Timer.delay(function() {
				cb(value.get());
			},ms);
		});
	}
}
tink_core__$Future_Future_$Impl_$.__name__ = true;
class tink_core_FutureTrigger {
	constructor() {
		this.list = new tink_core_CallbackList();
	}
	handle(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	map(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v1) {
				var node1 = f(v1);
				ret.trigger(node1);
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	flatMap(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	gather() {
		return this;
	}
	eager() {
		return this;
	}
	asFuture() {
		return this;
	}
	trigger(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	static gatherFuture(f) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f.handle($yield);
		});
	}
}
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core_FutureTrigger.prototype, {
	__class__: tink_core_FutureTrigger
});
class tink_core_JsPromiseTools {
	static toSurprise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
	static toPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
}
tink_core_JsPromiseTools.__name__ = true;
class tink_core__$Future_SuspendableFuture {
	constructor(wakeup) {
		this.suspended = true;
		var _gthis = this;
		this.wakeup = wakeup;
		this.callbacks = new tink_core_CallbackList();
		this.callbacks.ondrain = function() {
			if(_gthis.callbacks != null) {
				_gthis.suspended = true;
				var this1 = _gthis.link;
				if(this1 != null) {
					this1.cancel();
				}
				_gthis.link = null;
			}
		};
	}
	trigger(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	handle(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				var tmp = f(res);
				$yield(tmp);
			});
		});
	}
	flatMap(f) {
		return tink_core__$Future_Future_$Impl_$.flatten(this.map(f));
	}
	gather() {
		return this;
	}
	eager() {
		this.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return this;
	}
}
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_SuspendableFuture.prototype, {
	__class__: tink_core__$Future_SuspendableFuture
});
class tink_core__$Lazy_Lazy_$Impl_$ {
	static get(this1) {
		return this1.get();
	}
	static ofFunc(f) {
		return new tink_core__$Lazy_LazyFunc(f);
	}
	static map(this1,f) {
		return this1.map(f);
	}
	static flatMap(this1,f) {
		return this1.flatMap(f);
	}
	static ofConst(c) {
		return new tink_core__$Lazy_LazyConst(c);
	}
}
tink_core__$Lazy_Lazy_$Impl_$.__name__ = true;
class tink_core__$Lazy_LazyFunc {
	constructor(f) {
		this.f = f;
	}
	get() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	flatMap(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
}
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyFunc.prototype, {
	__class__: tink_core__$Lazy_LazyFunc
});
class tink_core_NamedWith {
	constructor(name,value) {
		this.name = name;
		this.value = value;
	}
}
tink_core_NamedWith.__name__ = true;
Object.assign(tink_core_NamedWith.prototype, {
	__class__: tink_core_NamedWith
});
class tink_core_OptionTools {
	static force(o,pos) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
		}
	}
	static or(o,l) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			return l.get();
		}
	}
	static orNull(o) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			return null;
		}
	}
	static filter(o,f) {
		if(o._hx_index == 0) {
			if(f(o.v) == false) {
				return haxe_ds_Option.None;
			} else {
				return o;
			}
		} else {
			return o;
		}
	}
	static satisfies(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return f(v);
		} else {
			return false;
		}
	}
	static equals(o,v) {
		if(o._hx_index == 0) {
			var v1 = o.v;
			return v1 == v;
		} else {
			return false;
		}
	}
	static map(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return haxe_ds_Option.Some(f(v));
		} else {
			return haxe_ds_Option.None;
		}
	}
	static flatMap(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return f(v);
		} else {
			return haxe_ds_Option.None;
		}
	}
	static iterator(o) {
		return new tink_core_OptionIter(o);
	}
	static toArray(o) {
		if(o._hx_index == 0) {
			var v = o.v;
			return [v];
		} else {
			return [];
		}
	}
}
tink_core_OptionTools.__name__ = true;
class tink_core_OptionIter {
	constructor(o) {
		this.alive = true;
		if(o._hx_index == 0) {
			var v = o.v;
			this.value = v;
		} else {
			this.alive = false;
		}
	}
	hasNext() {
		return this.alive;
	}
	next() {
		this.alive = false;
		return this.value;
	}
}
tink_core_OptionIter.__name__ = true;
Object.assign(tink_core_OptionIter.prototype, {
	__class__: tink_core_OptionIter
});
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
class tink_core_OutcomeTools {
	static sure(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var failure = outcome.failure;
			var _g = tink_core_TypedError.asError(failure);
			if(_g == null) {
				throw new js__$Boot_HaxeError(failure);
			} else {
				var e = _g;
				return e.throwSelf();
			}
			break;
		}
	}
	static toOption(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return haxe_ds_Option.Some(data);
		case 1:
			var _g1 = outcome.failure;
			return haxe_ds_Option.None;
		}
	}
	static toOutcome(option,pos) {
		switch(option._hx_index) {
		case 0:
			var value = option.v;
			return tink_core_Outcome.Success(value);
		case 1:
			return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
		}
	}
	static orNull(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var _g1 = outcome.failure;
			return null;
		}
	}
	static orUse(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var _g1 = outcome.failure;
			return fallback.get();
		}
	}
	static orTry(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			var _g = outcome.data;
			return outcome;
		case 1:
			var _g1 = outcome.failure;
			return fallback.get();
		}
	}
	static equals(outcome,to) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data == to;
		case 1:
			var _g1 = outcome.failure;
			return false;
		}
	}
	static map(outcome,transform) {
		switch(outcome._hx_index) {
		case 0:
			var a = outcome.data;
			return tink_core_Outcome.Success(transform(a));
		case 1:
			var f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static isSuccess(outcome) {
		if(outcome._hx_index == 0) {
			var _g = outcome.data;
			return true;
		} else {
			return false;
		}
	}
	static flatMap(o,mapper) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
	}
	static swap(outcome,v) {
		switch(outcome._hx_index) {
		case 0:
			var a = outcome.data;
			return tink_core_Outcome.Success(v);
		case 1:
			var f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static next(outcome,f) {
		switch(outcome._hx_index) {
		case 0:
			var v = outcome.data;
			return f(v);
		case 1:
			var e = outcome.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	}
	static attempt(f,report) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( e ) {
			return tink_core_Outcome.Failure(report(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
		}
	}
	static flatten(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f = _g.failure;
				return tink_core_Outcome.Failure(f);
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	}
}
tink_core_OutcomeTools.__name__ = true;
class tink_core__$Outcome_OutcomeMapper_$Impl_$ {
	static _new(f) {
		var this1 = { f : f};
		return this1;
	}
	static apply(this1,o) {
		return this1.f(o);
	}
	static withSameError(f) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return f(d);
			case 1:
				var f1 = o.failure;
				return tink_core_Outcome.Failure(f1);
			}
		});
	}
	static withEitherError(f) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				var _g = f(d);
				switch(_g._hx_index) {
				case 0:
					var d1 = _g.data;
					return tink_core_Outcome.Success(d1);
				case 1:
					var f1 = _g.failure;
					return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
				}
				break;
			case 1:
				var f2 = o.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
			}
		});
	}
}
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = true;
class tink_core__$Pair_Pair_$Impl_$ {
	static _new(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	}
	static get_a(this1) {
		return this1.a;
	}
	static get_b(this1) {
		return this1.b;
	}
	static toBool(this1) {
		return this1 != null;
	}
	static isNil(this1) {
		return this1 == null;
	}
	static nil() {
		return null;
	}
}
tink_core__$Pair_Pair_$Impl_$.__name__ = true;
class tink_core_MPair {
	constructor(a,b) {
		this.a = a;
		this.b = b;
	}
}
tink_core_MPair.__name__ = true;
Object.assign(tink_core_MPair.prototype, {
	__class__: tink_core_MPair
});
class tink_core__$Progress_Progress_$Impl_$ {
	static trigger() {
		return new tink_core_ProgressTrigger();
	}
	static make(f) {
		var value = tink_core_ProgressType.InProgress(tink_core__$Progress_Progress_$Impl_$.INIT);
		var signal = tink_core__$Signal_Signal_$Impl_$.trigger();
		var future = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var progress = function(v,total) {
				switch(value._hx_index) {
				case 0:
					var current = value.v;
					if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
						var this1 = new tink_core_MPair(v,total);
						var pv = this1;
						value = tink_core_ProgressType.InProgress(pv);
						signal.handlers.invoke(pv);
					}
					break;
				case 1:
					var _g1 = value.v;
					break;
				}
			};
			var finish = function(v1) {
				if(value._hx_index == 1) {
					var _g = value.v;
				} else {
					value = tink_core_ProgressType.Finished(v1);
					cb(v1);
				}
			};
			f(progress,finish);
		});
		return new tink_core_CompositeProgress(future,signal);
	}
	static asFuture(this1) {
		return this1;
	}
	static asPromise(p) {
		return p;
	}
	static promise(v) {
		return new tink_core_PromiseProgress(v);
	}
	static future(v) {
		return new tink_core_FutureProgress(v);
	}
	static next(this1,f) {
		return tink_core__$Future_Future_$Impl_$.next(this1,f);
	}
}
tink_core__$Progress_Progress_$Impl_$.__name__ = true;
class tink_core_SignalObject {
}
tink_core_SignalObject.__name__ = true;
tink_core_SignalObject.__isInterface__ = true;
Object.assign(tink_core_SignalObject.prototype, {
	__class__: tink_core_SignalObject
});
class tink_core_ProgressObject {
}
tink_core_ProgressObject.__name__ = true;
tink_core_ProgressObject.__isInterface__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
class tink_core_CompositeProgress {
	constructor(future,signal) {
		if(tink_core_CompositeProgress._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(future,signal);
	}
	_hx_constructor(future,signal) {
		this.future = future;
		this.signal = signal;
	}
	map(f) {
		var ret = this.future.map(f);
		return ret.gather();
	}
	flatMap(f) {
		var ret = this.future.flatMap(f);
		return ret.gather();
	}
	handle(callback) {
		return this.future.handle(callback);
	}
	listen(callback) {
		return this.signal.listen(callback);
	}
	gather() {
		return this.future.gather();
	}
	eager() {
		return this.future.eager();
	}
}
tink_core_CompositeProgress.__name__ = true;
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
Object.assign(tink_core_CompositeProgress.prototype, {
	__class__: tink_core_CompositeProgress
});
class tink_core_ProgressTrigger extends tink_core_CompositeProgress {
	constructor() {
		tink_core_CompositeProgress._hx_skip_constructor = true;
		super();
		tink_core_CompositeProgress._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.value = tink_core_ProgressType.InProgress(tink_core__$Progress_Progress_$Impl_$.INIT);
		super._hx_constructor(this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core__$Signal_Signal_$Impl_$.trigger());
	}
	progress(v,total) {
		var _g = this.value;
		switch(_g._hx_index) {
		case 0:
			var current = _g.v;
			if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
				var this1 = new tink_core_MPair(v,total);
				var pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			var _g2 = _g.v;
			break;
		}
	}
	finish(v) {
		var _g = this.value;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
		} else {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	asProgress() {
		return this;
	}
}
tink_core_ProgressTrigger.__name__ = true;
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
Object.assign(tink_core_ProgressTrigger.prototype, {
	__class__: tink_core_ProgressTrigger
});
class tink_core_FutureProgress extends tink_core_CompositeProgress {
	constructor(future) {
		var ret = future.flatMap(function(progress) {
			return progress;
		});
		super(ret.gather(),tink_core__$Signal_Signal_$Impl_$.generate(function(cb) {
			future.handle(function(progress1) {
				progress1.listen(cb);
			});
		}));
	}
}
tink_core_FutureProgress.__name__ = true;
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
Object.assign(tink_core_FutureProgress.prototype, {
	__class__: tink_core_FutureProgress
});
class tink_core_PromiseProgress extends tink_core_CompositeProgress {
	constructor(promise) {
		var ret = promise.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var progress = o.data;
				return progress.map(tink_core_Outcome.Success);
			case 1:
				var e = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
		});
		super(ret.gather(),tink_core__$Signal_Signal_$Impl_$.generate(function(cb) {
			promise.handle(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var progress1 = o1.data;
					progress1.listen(cb);
					break;
				case 1:
					var e1 = o1.failure;
					break;
				}
			});
		}));
	}
}
tink_core_PromiseProgress.__name__ = true;
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
Object.assign(tink_core_PromiseProgress.prototype, {
	__class__: tink_core_PromiseProgress
});
class tink_core__$Progress_ProgressValue_$Impl_$ {
	static _new(value,total) {
		var this1 = new tink_core_MPair(value,total);
		var this2 = this1;
		return this2;
	}
	static normalize(this1) {
		var o = this1.b;
		if(o._hx_index == 0) {
			var v = o.v;
			return haxe_ds_Option.Some(this1.a / v);
		} else {
			return haxe_ds_Option.None;
		}
	}
	static get_value(this1) {
		return this1.a;
	}
	static get_total(this1) {
		return this1.b;
	}
}
tink_core__$Progress_ProgressValue_$Impl_$.__name__ = true;
class tink_core__$Progress_UnitInterval_$Impl_$ {
	static toPercentageString(this1,dp) {
		var m = Math.pow(10,dp);
		var v = Math.round(this1 * m * 100) / m;
		var s = v == null ? "null" : "" + v;
		var _g = s.indexOf(".");
		if(_g == -1) {
			return s + "." + StringTools.lpad("","0",dp) + "%";
		} else {
			var i = _g;
			if(s.length - i > dp) {
				return HxOverrides.substr(s,0,dp + i + 1) + "%";
			} else {
				var i1 = _g;
				return StringTools.rpad(s,"0",i1 + dp + 1) + "%";
			}
		}
	}
}
tink_core__$Progress_UnitInterval_$Impl_$.__name__ = true;
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : true, __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class tink_core_TotalTools {
	static eq(a,b) {
		switch(a._hx_index) {
		case 0:
			if(b._hx_index == 0) {
				var t1 = a.v;
				var t2 = b.v;
				return t1 == t2;
			} else {
				return false;
			}
			break;
		case 1:
			if(b._hx_index == 1) {
				return true;
			} else {
				return false;
			}
			break;
		}
	}
}
tink_core_TotalTools.__name__ = true;
class tink_core__$Promise_Promise_$Impl_$ {
	static _new(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		var this1 = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			f(function(v) {
				cb(tink_core_Outcome.Success(v));
			},function(e) {
				cb(tink_core_Outcome.Failure(e));
			});
		},lazy);
		return this1;
	}
	static eager(this1) {
		return this1.eager();
	}
	static map(this1,f) {
		var ret = this1.map(f);
		return ret.gather();
	}
	static flatMap(this1,f) {
		var ret = this1.flatMap(f);
		return ret.gather();
	}
	static tryRecover(this1,f) {
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static recover(this1,f) {
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static mapError(this1,f) {
		var ret = this1.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				return o;
			case 1:
				var e = o.failure;
				return tink_core_Outcome.Failure(f(e));
			}
		});
		return ret.gather();
	}
	static handle(this1,cb) {
		return this1.handle(cb);
	}
	static noise(this1) {
		return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
		});
	}
	static isSuccess(this1) {
		var ret = this1.map(function(o) {
			return tink_core_OutcomeTools.isSuccess(o);
		});
		return ret.gather();
	}
	static next(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var gather1 = gather;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return f(d);
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		if(gather1) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static swap(this1,v) {
		return tink_core__$Future_Future_$Impl_$._tryMap(this1,function(_) {
			return v;
		});
	}
	static swapError(this1,e) {
		return tink_core__$Promise_Promise_$Impl_$.mapError(this1,function(_) {
			return e;
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
			return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
				return merger(t,a);
			},false);
		},gather);
	}
	static and(a,b) {
		return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
			var this1 = new tink_core_MPair(a1,b1);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
		});
	}
	static iterate(promises,$yield,fallback,lazy) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var iter = $getIterator(promises);
			var next = null;
			next = function() {
				if(iter.hasNext()) {
					iter.next().handle(function(o) {
						switch(o._hx_index) {
						case 0:
							var v = o.data;
							$yield(v).handle(function(o1) {
								switch(o1._hx_index) {
								case 0:
									var _g = o1.data;
									switch(_g._hx_index) {
									case 0:
										var ret = _g.v;
										cb(tink_core_Outcome.Success(ret));
										break;
									case 1:
										next();
										break;
									}
									break;
								case 1:
									var e = o1.failure;
									cb(tink_core_Outcome.Failure(e));
									break;
								}
							});
							break;
						case 1:
							var e1 = o.failure;
							cb(tink_core_Outcome.Failure(e1));
							break;
						}
					});
				} else {
					fallback.handle(cb);
				}
			};
			next();
		},lazy);
	}
	static retry(gen,next) {
		var stamp = function() {
			return Date.now() / 1000 * 1000;
		};
		var start = stamp();
		var attempt = null;
		attempt = function(count) {
			var f = function(error) {
				var f1 = stamp() - start;
				return tink_core__$Promise_Promise_$Impl_$.next(next({ attempt : count, error : error, elapsed : f1}),function(_) {
					return attempt(count + 1);
				});
			};
			var ret = gen().flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					var d = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
				case 1:
					var e = o.failure;
					return f(e);
				}
			});
			return ret.gather();
		};
		return attempt(1);
	}
	static ofJsPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
	static toJsPromise(this1) {
		return new Promise(function(resolve,reject) {
			this1.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var v = o.data;
					resolve(v);
					break;
				case 1:
					var e = o.failure;
					reject(new tink_core__$Promise_TinkError(e));
					break;
				}
			});
		});
	}
	static ofSpecific(s) {
		return s;
	}
	static ofFuture(f) {
		var ret = f.map(tink_core_Outcome.Success);
		return ret.gather();
	}
	static ofOutcome(o) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
	}
	static ofError(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
	static ofData(d) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
	}
	static lazy(p) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			p.get().handle(cb);
		},true);
	}
	static inParallel(a,concurrency,lazy) {
		if(a.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var result = [];
				var pending = a.length;
				var links = null;
				var linkArray = [];
				var sync = false;
				var i = 0;
				var iter = HxOverrides.iter(a);
				var next = null;
				var done = function(o) {
					if(links == null) {
						sync = true;
					} else if(links != null) {
						links.cancel();
					}
					cb(o);
				};
				var fail = function(e) {
					pending = 0;
					done(tink_core_Outcome.Failure(e));
				};
				var set = function(index,value) {
					result[index] = value;
					if((pending -= 1) == 0) {
						done(tink_core_Outcome.Success(result));
					} else if(iter.hasNext() && pending > 0) {
						next();
					}
				};
				next = function() {
					i += 1;
					var index1 = i - 1;
					var next1 = iter.next().handle(function(o1) {
						switch(o1._hx_index) {
						case 0:
							var v = o1.data;
							set(index1,v);
							break;
						case 1:
							var e1 = o1.failure;
							fail(e1);
							break;
						}
					});
					linkArray.push(next1);
				};
				while(true) {
					var tmp;
					if(iter.hasNext() && pending > 0) {
						if(concurrency != null) {
							concurrency -= 1;
							tmp = concurrency + 1 > 0;
						} else {
							tmp = true;
						}
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					next();
				}
				links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
				if(sync) {
					if(links != null) {
						links.cancel();
					}
				}
			},lazy);
		}
	}
	static inSequence(a) {
		var loop = null;
		loop = function(index) {
			if(index == a.length) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
			} else {
				return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
					return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
					});
				});
			}
		};
		return loop(0);
	}
	static cache(gen) {
		var p = null;
		return function() {
			var ret = p;
			if(ret == null) {
				var sync = false;
				ret = tink_core__$Promise_Promise_$Impl_$.next(gen(),function(o) {
					o.b.handle(function(_) {
						sync = true;
						p = null;
					});
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
				});
				if(!sync) {
					p = ret;
				}
			}
			var ret1 = ret.map(function(o1) {
				if(!tink_core_OutcomeTools.isSuccess(o1)) {
					p = null;
				}
				return o1;
			});
			return ret1.gather();
		};
	}
	static lift(p) {
		return p;
	}
	static trigger() {
		var this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	}
	static reject(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
}
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
class tink_core__$Promise_Next_$Impl_$ {
	static ofSafe(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
		};
	}
	static ofSync(f) {
		return function(x) {
			var ret = f(x).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
		};
	}
	static _chain(a,b) {
		return function(v) {
			return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
		};
	}
}
tink_core__$Promise_Next_$Impl_$.__name__ = true;
class tink_core__$Promise_Recover_$Impl_$ {
	static ofSync(f) {
		return function(e) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
		};
	}
}
tink_core__$Promise_Recover_$Impl_$.__name__ = true;
class tink_core__$Promise_Combiner_$Impl_$ {
	static ofSafe(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
		};
	}
	static ofSync(f) {
		return function(x1,x2) {
			var ret = f(x1,x2).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
		};
	}
}
tink_core__$Promise_Combiner_$Impl_$.__name__ = true;
class tink_core__$Promise_PromiseTrigger_$Impl_$ {
	static _new() {
		var this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(this1,v) {
		return this1.trigger(tink_core_Outcome.Success(v));
	}
	static reject(this1,e) {
		return this1.trigger(tink_core_Outcome.Failure(e));
	}
	static asPromise(this1) {
		return this1;
	}
}
tink_core__$Promise_PromiseTrigger_$Impl_$.__name__ = true;
class tink_core__$Promise_TinkError extends Error {
	constructor(e) {
		super(e.message);
		this.data = e;
	}
}
tink_core__$Promise_TinkError.__name__ = true;
tink_core__$Promise_TinkError.__super__ = Error;
Object.assign(tink_core__$Promise_TinkError.prototype, {
	__class__: tink_core__$Promise_TinkError
});
class tink_core__$Ref_Ref_$Impl_$ {
	static _new() {
		var this1 = new Array(1);
		var this2 = this1;
		return this2;
	}
	static get_value(this1) {
		return this1[0];
	}
	static set_value(this1,param) {
		return this1[0] = param;
	}
	static toString(this1) {
		return "@[" + Std.string(this1[0]) + "]";
	}
	static to(v) {
		var this1 = new Array(1);
		var this2 = this1;
		var ret = this2;
		ret[0] = v;
		return ret;
	}
}
tink_core__$Ref_Ref_$Impl_$.__name__ = true;
class tink_core__$Signal_Signal_$Impl_$ {
	static _new(f) {
		var this1 = new tink_core__$Signal_SimpleSignal(f);
		return this1;
	}
	static handle(this1,handler) {
		return this1.listen(handler);
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				var this3 = f(result);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,this3);
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static flatMap(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				f(result).handle(cb);
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static filter(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				if(f(result)) {
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
				}
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static select(this1,selector,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				var _g = selector(result);
				switch(_g._hx_index) {
				case 0:
					var v = _g.v;
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
					break;
				case 1:
					break;
				}
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static join(this1,other,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static nextTime(this1,condition) {
		var ret = new tink_core_FutureTrigger();
		var link = null;
		var immediate = false;
		link = this1.listen(function(v) {
			if(condition == null || condition(v)) {
				ret.trigger(v);
				if(link == null) {
					immediate = true;
				} else if(link != null) {
					link.cancel();
				}
			}
		});
		if(immediate) {
			if(link != null) {
				link.cancel();
			}
		}
		return ret;
	}
	static until(this1,end) {
		var ret = new tink_core__$Signal_Suspendable(function($yield) {
			var this2 = this1.listen($yield);
			if(this2 == null) {
				return tink_core__$Callback_CallbackLink_$Impl_$.noop;
			} else {
				return ($_=this2,$bind($_,$_.cancel));
			}
		});
		end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(ret,ret.kill)));
		return ret;
	}
	static next(this1,condition) {
		return tink_core__$Signal_Signal_$Impl_$.nextTime(this1,condition);
	}
	static noise(this1) {
		return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
			return tink_core_Noise.Noise;
		});
	}
	static gather(this1) {
		var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
		this1.listen(function(x) {
			ret.handlers.invoke(x);
		});
		return ret;
	}
	static generate(generator) {
		var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
		generator($bind(ret,ret.trigger));
		return ret;
	}
	static trigger() {
		return new tink_core_SignalTrigger();
	}
	static create(create) {
		return new tink_core__$Signal_Suspendable(create);
	}
	static ofClassical(add,remove,gather) {
		if(gather == null) {
			gather = true;
		}
		var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
			var f = function(a) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,a);
			};
			add(f);
			var f1 = remove;
			var a1 = f;
			var this2 = new tink_core_SimpleLink(function() {
				f1(a1);
			});
			return this2;
		});
		var ret = this1;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
}
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
class tink_core__$Signal_SimpleSignal {
	constructor(f) {
		this.f = f;
	}
	listen(cb) {
		return this.f(cb);
	}
}
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_SimpleSignal.prototype, {
	__class__: tink_core__$Signal_SimpleSignal
});
class tink_core__$Signal_Suspendable {
	constructor(activate) {
		this.killed = false;
		this.trigger = new tink_core_SignalTrigger();
		this.activate = activate;
	}
	kill() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	listen(cb) {
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _gthis = this;
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
}
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_Suspendable.prototype, {
	__class__: tink_core__$Signal_Suspendable
});
class tink_core_SignalTrigger {
	constructor() {
		this.handlers = new tink_core_CallbackList();
	}
	trigger(event) {
		this.handlers.invoke(event);
	}
	getLength() {
		return this.handlers.used;
	}
	listen(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	clear() {
		this.handlers.clear();
	}
	asSignal() {
		return this;
	}
}
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core_SignalTrigger.prototype, {
	__class__: tink_core_SignalTrigger
});
class tink_io__$PipeOptions_PipeOptions_$Impl_$ {
	static get_end(this1) {
		if(this1 != null) {
			return this1.end;
		} else {
			return false;
		}
	}
	static get_destructive(this1) {
		if(this1 != null) {
			return this1.destructive;
		} else {
			return false;
		}
	}
}
tink_io__$PipeOptions_PipeOptions_$Impl_$.__name__ = true;
var tink_io_PipeResult = $hxEnums["tink.io.PipeResult"] = { __ename__ : true, __constructs__ : ["AllWritten","SinkEnded","SinkFailed","SourceFailed"]
	,AllWritten: {_hx_index:0,__enum__:"tink.io.PipeResult",toString:$estr}
	,SinkEnded: ($_=function(result,rest) { return {_hx_index:1,result:result,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["result","rest"],$_)
	,SinkFailed: ($_=function(e,rest) { return {_hx_index:2,e:e,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,SourceFailed: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_io_PipeResultTools {
	static toOutcome(result) {
		switch(result._hx_index) {
		case 0:
			return tink_core_Outcome.Success(haxe_ds_Option.None);
		case 1:
			var _g4 = result.rest;
			var result1 = result.result;
			return tink_core_Outcome.Success(haxe_ds_Option.Some(result1));
		case 2:
			var _g1 = result.rest;
			var e = result.e;
			return tink_core_Outcome.Failure(e);
		case 3:
			var e1 = result.e;
			return tink_core_Outcome.Failure(e1);
		}
	}
	static toResult(c,result,buffered) {
		var mk = function(s) {
			if(buffered == null) {
				return s;
			} else {
				var v = buffered;
				return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(v)));
			}
		};
		switch(c._hx_index) {
		case 0:
			var rest = c.rest;
			return tink_io_PipeResult.SinkEnded(result,mk(rest));
		case 1:
			var rest1 = c.at;
			var e = c.error;
			return tink_io_PipeResult.SinkFailed(e,mk(rest1));
		case 2:
			var e1 = c.error;
			return tink_io_PipeResult.SourceFailed(e1);
		case 3:
			return tink_io_PipeResult.AllWritten;
		}
	}
}
tink_io_PipeResultTools.__name__ = true;
class tink_io_SinkObject {
}
tink_io_SinkObject.__name__ = true;
tink_io_SinkObject.__isInterface__ = true;
Object.assign(tink_io_SinkObject.prototype, {
	__class__: tink_io_SinkObject
});
class tink_io_SinkBase {
	get_sealed() {
		return true;
	}
	consume(source,options) {
		throw new js__$Boot_HaxeError("not implemented");
	}
}
tink_io_SinkBase.__name__ = true;
tink_io_SinkBase.__interfaces__ = [tink_io_SinkObject];
Object.assign(tink_io_SinkBase.prototype, {
	__class__: tink_io_SinkBase
});
class tink_io__$Sink_Blackhole extends tink_io_SinkBase {
	constructor() {
		super();
	}
	consume(source,options) {
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var _g1 = o.rest;
				throw new js__$Boot_HaxeError("unreachable");
			case 2:
				var e = o.error;
				return tink_io_PipeResult.SourceFailed(e);
			case 3:
				return tink_io_PipeResult.AllWritten;
			}
		});
		return ret.gather();
	}
}
tink_io__$Sink_Blackhole.__name__ = true;
tink_io__$Sink_Blackhole.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_Blackhole.prototype, {
	__class__: tink_io__$Sink_Blackhole
});
class tink_io__$Sink_SinkYielding_$Impl_$ {
	static end(this1) {
		if(this1.get_sealed()) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		} else {
			var ret = this1.consume(tink_io__$Source_Source_$Impl_$.EMPTY,{ end : true}).map(function(r) {
				switch(r._hx_index) {
				case 0:
					return tink_core_Outcome.Success(true);
				case 1:
					var _g3 = r.rest;
					var _g2 = r.result;
					return tink_core_Outcome.Success(true);
				case 2:
					var _g1 = r.rest;
					var e = r.e;
					return tink_core_Outcome.Failure(e);
				}
			});
			return ret.gather();
		}
	}
	static dirty(this1) {
		return this1;
	}
	static ofError(e) {
		return new tink_io__$Sink_ErrorSink(e);
	}
	static ofPromised(p) {
		var ret = p.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				return v;
			case 1:
				var e = o.failure;
				return tink_io__$Sink_SinkYielding_$Impl_$.ofError(e);
			}
		});
		return new tink_io__$Sink_FutureSink(ret.gather());
	}
	static ofNodeStream(name,r) {
		return tink_io_nodejs_NodejsSink.wrap(name,r);
	}
	static ofOutput(name,target,options) {
		var tmp;
		if(options == null) {
			tmp = tink_io__$Worker_Worker_$Impl_$.get();
		} else {
			var _g = options.worker;
			if(_g == null) {
				tmp = tink_io__$Worker_Worker_$Impl_$.get();
			} else {
				var w = _g;
				tmp = w;
			}
		}
		return new tink_io_std_OutputSink(name,target,tmp);
	}
}
tink_io__$Sink_SinkYielding_$Impl_$.__name__ = true;
class tink_io__$Sink_FutureSink extends tink_io_SinkBase {
	constructor(f) {
		super();
		this.f = f;
	}
	consume(source,options) {
		var ret = this.f.flatMap(function(sink) {
			return sink.consume(source,options);
		});
		return ret.gather();
	}
}
tink_io__$Sink_FutureSink.__name__ = true;
tink_io__$Sink_FutureSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_FutureSink.prototype, {
	__class__: tink_io__$Sink_FutureSink
});
class tink_io__$Sink_ErrorSink extends tink_io_SinkBase {
	constructor(error) {
		super();
		this.error = error;
	}
	get_sealed() {
		return false;
	}
	consume(source,options) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_PipeResult.SinkFailed(this.error,source)));
	}
}
tink_io__$Sink_ErrorSink.__name__ = true;
tink_io__$Sink_ErrorSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_ErrorSink.prototype, {
	__class__: tink_io__$Sink_ErrorSink
});
class tink_streams_StreamObject {
}
tink_streams_StreamObject.__name__ = true;
tink_streams_StreamObject.__isInterface__ = true;
Object.assign(tink_streams_StreamObject.prototype, {
	__class__: tink_streams_StreamObject
});
class tink_streams_StreamBase {
	constructor() {
		if(tink_streams_StreamBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.retainCount = 0;
	}
	get_depleted() {
		return false;
	}
	retain() {
		this.retainCount++;
		var retained = true;
		var _gthis = this;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	next() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	regroup(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	map(f) {
		return this.regroup(f);
	}
	filter(f) {
		return this.regroup(f);
	}
	destroy() {
	}
	append(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	prepend(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	blend(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return new tink_streams_BlendStream(this,other);
		}
	}
	decompose(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	idealize(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	reduce(initial,reducer) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
				var ret = reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.result;
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o.e;
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					var _g3 = c.rest;
					throw new js__$Boot_HaxeError("assert");
				case 1:
					var rest = c.at;
					var e1 = c.error;
					cb(tink_streams_Reduction.Crashed(e1,rest));
					break;
				case 2:
					var e2 = c.error;
					cb(tink_streams_Reduction.Failed(e2));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	forEach(handler) {
		throw new js__$Boot_HaxeError("not implemented");
	}
}
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
Object.assign(tink_streams_StreamBase.prototype, {
	__class__: tink_streams_StreamBase
});
class tink_streams_Empty extends tink_streams_StreamBase {
	constructor() {
		super();
	}
	get_depleted() {
		return true;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	static make() {
		return tink_streams_Empty.inst;
	}
}
tink_streams_Empty.__name__ = true;
tink_streams_Empty.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Empty.prototype, {
	__class__: tink_streams_Empty
});
class tink_io__$Source_Source_$Impl_$ {
	static dirty(this1) {
		return this1;
	}
	static get_depleted(this1) {
		return this1.get_depleted();
	}
	static ofNodeStream(name,r,options) {
		if(options == null) {
			options = { };
		}
		return tink_io_nodejs_NodejsSource.wrap(name,r,options.chunkSize,options.onEnd);
	}
	static toNodeStream(this1) {
		var native = new js_node_stream_PassThrough();
		var source = tink_io__$Source_Source_$Impl_$.chunked(this1);
		var write = null;
		write = function() {
			source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(chunk) {
				var b = chunk.toBytes();
				var data = b.b;
				var ok = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
				var ok1 = native.write(ok);
				if(ok1) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Finish));
				}
			})).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					source = rest;
					break;
				case 2:
					var e = o.error;
					native.emit("error",new Error(e.message));
					break;
				case 3:
					native.removeListener("drain",write);
					native.end();
					break;
				}
			});
		};
		var f = write;
		var tmp = function() {
			return haxe_Timer.delay(f,1);
		};
		native.on("drain",tmp);
		write();
		return native;
	}
	static ofJsFile(name,file,options) {
		var chunkSize = options == null || options.chunkSize == null ? 16777216 : options.chunkSize;
		return new tink_io_js_BlobSource(name,file,0,chunkSize);
	}
	static ofJsBlob(name,blob,options) {
		var chunkSize = options == null || options.chunkSize == null ? 16777216 : options.chunkSize;
		return new tink_io_js_BlobSource(name,blob,0,chunkSize);
	}
	static ofInput(name,input,options) {
		if(options == null) {
			options = { };
		}
		var tmp = tink_io__$Worker_Worker_$Impl_$.ensure(options.worker);
		var length;
		var _g = options.chunkSize;
		if(_g == null) {
			length = 65536;
		} else {
			var v = _g;
			length = v;
		}
		return new tink_io_std_InputSource(name,input,tmp,new haxe_io_Bytes(new ArrayBuffer(length)),0);
	}
	static chunked(this1) {
		return this1;
	}
	static ofError(e) {
		return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
	}
	static ofFuture(f) {
		return tink_streams__$Stream_Stream_$Impl_$.flatten(f);
	}
	static ofPromised(p) {
		var ret = p.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var s = o.data;
				return s;
			case 1:
				var e = o.failure;
				return tink_io__$Source_Source_$Impl_$.ofError(e);
			}
		});
		return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
	}
	static concatAll(s) {
		return s.reduce(tink__$Chunk_Chunk_$Impl_$.EMPTY,tink_streams__$Stream_Reducer_$Impl_$.ofSafe(function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink__$Chunk_Chunk_$Impl_$.catChunk(res,cur))));
		}));
	}
	static pipeTo(this1,target,options) {
		return target.consume(this1,options);
	}
	static append(this1,that) {
		return this1.append(that);
	}
	static prepend(this1,that) {
		return this1.prepend(that);
	}
	static transform(this1,transformer) {
		return transformer.transform(this1);
	}
	static skip(this1,len) {
		return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
			var chunk = chunks[0];
			if(len <= 0) {
				return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(chunk));
			}
			var length = chunk.getLength();
			var out = tink_streams_RegroupResult.Converted(len < length ? tink_streams__$Stream_Stream_$Impl_$.single(chunk.slice(len,length)) : tink_streams_Empty.inst);
			len -= length;
			return out;
		}));
	}
	static limit(this1,len) {
		if(len == 0) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		}
		return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
			if(len <= 0) {
				return tink_streams_RegroupResult.Terminated(haxe_ds_Option.None);
			}
			var chunk = chunks[0];
			var length = chunk.getLength();
			var out = len == length ? tink_streams_RegroupResult.Terminated(haxe_ds_Option.Some(tink_streams__$Stream_Stream_$Impl_$.single(chunk))) : tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(len < length ? chunk.slice(0,len) : chunk));
			len -= length;
			return out;
		}));
	}
	static ofChunk(chunk) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
	}
	static ofString(s) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s))));
	}
	static ofBytes(b) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(b)));
	}
}
tink_io__$Source_Source_$Impl_$.__name__ = true;
class tink_io_RealSourceTools {
	static all(s) {
		var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
			switch(o._hx_index) {
			case 1:
				var e = o.error;
				return tink_core_Outcome.Failure(e);
			case 2:
				var c = o.result;
				return tink_core_Outcome.Success(c);
			}
		});
		return ret.gather();
	}
	static parse(s,p) {
		var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
			switch(r._hx_index) {
			case 0:
				var rest = r.rest;
				var data = r.data;
				var this1 = new tink_core_MPair(data,rest);
				return tink_core_Outcome.Success(this1);
			case 1:
				var _g1 = r.rest;
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			case 2:
				var e1 = r.e;
				return tink_core_Outcome.Failure(e1);
			}
		});
		return ret.gather();
	}
	static split(src,delim) {
		var s = tink_io_RealSourceTools.parse(src,new tink_io_Splitter(delim));
		return { before : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p) {
			var _g = p.a;
			switch(_g._hx_index) {
			case 0:
				var chunk = _g.v;
				return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
			case 1:
				return src;
			}
		})))), delimiter : tink_core__$Promise_Promise_$Impl_$.next(s,function(p1) {
			var _g1 = p1.a;
			switch(_g1._hx_index) {
			case 0:
				var _g11 = _g1.v;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(delim)));
			case 1:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Delimiter not found",{ fileName : "tink/io/Source.hx", lineNumber : 195, className : "tink.io.RealSourceTools", methodName : "split"}))));
			}
		}), after : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p2) {
			return p2.b;
		}))))};
	}
	static parseStream(s,p) {
		return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
	}
	static idealize(s,rescue) {
		return tink_io__$Source_Source_$Impl_$.chunked(s).idealize(rescue);
	}
}
tink_io_RealSourceTools.__name__ = true;
class tink_io_IdealSourceTools {
	static all(s) {
		var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
			var c = o.result;
			return c;
		});
		return ret.gather();
	}
	static parse(s,p) {
		var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
			switch(r._hx_index) {
			case 0:
				var rest = r.rest;
				var data = r.data;
				var this1 = new tink_core_MPair(data,rest);
				return tink_core_Outcome.Success(this1);
			case 1:
				var _g1 = r.rest;
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}
	static parseStream(s,p) {
		return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
	}
	static split(s,delim) {
		var s1 = tink_io_RealSourceTools.split(s,delim);
		return { before : tink_io_RealSourceTools.idealize(s1.before,function(e) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		}), delimiter : s1.delimiter, after : tink_io_RealSourceTools.idealize(s1.after,function(e1) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		})};
	}
}
tink_io_IdealSourceTools.__name__ = true;
var tink_io_ParseStep = $hxEnums["tink.io.ParseStep"] = { __ename__ : true, __constructs__ : ["Progressed","Done","Failed"]
	,Progressed: {_hx_index:0,__enum__:"tink.io.ParseStep",toString:$estr}
	,Done: ($_=function(r) { return {_hx_index:1,r:r,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["r"],$_)
	,Failed: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_io_ParseResult = $hxEnums["tink.io.ParseResult"] = { __ename__ : true, __constructs__ : ["Parsed","Invalid","Broke"]
	,Parsed: ($_=function(data,rest) { return {_hx_index:0,data:data,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["data","rest"],$_)
	,Invalid: ($_=function(e,rest) { return {_hx_index:1,e:e,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,Broke: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_io__$StreamParser_StreamParser_$Impl_$ {
	static doParse(source,p,consume,finish) {
		var cursor = tink__$Chunk_Chunk_$Impl_$.EMPTY.getCursor();
		var resume = true;
		var mk = function(source1) {
			if(cursor.currentPos < cursor.length) {
				return source1.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.right())));
			} else {
				return source1;
			}
		};
		var flush = function() {
			var _g = cursor.flush();
			var c = _g;
			if(c.getLength() == 0) {
				return tink_io__$Source_Source_$Impl_$.EMPTY;
			} else {
				var c1 = _g;
				return new tink_streams_Single(new tink_core__$Lazy_LazyConst(c1));
			}
		};
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(chunk) {
			if(chunk.getLength() == 0) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
			}
			cursor.shift(chunk);
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var next = null;
				next = function() {
					cursor.shift();
					var lastPos = cursor.currentPos;
					var _g1 = p.progress(cursor);
					switch(_g1._hx_index) {
					case 0:
						if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
							next();
						} else {
							cb(tink_streams_Handled.Resume);
						}
						break;
					case 1:
						var v = _g1.r;
						consume(v).handle(function(o) {
							resume = o.resume;
							if(resume) {
								if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
									next();
								} else {
									cb(tink_streams_Handled.Resume);
								}
							} else {
								cb(tink_streams_Handled.Finish);
							}
						});
						break;
					case 2:
						var e = _g1.e;
						cb(tink_streams_Handled.Clog(e));
						break;
					}
				};
				next();
			});
		})).flatMap(function(c2) {
			switch(c2._hx_index) {
			case 0:
				var rest = c2.rest;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(rest))));
			case 1:
				var rest1 = c2.at;
				var e1 = c2.error;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e1,mk(rest1))));
			case 2:
				var e2 = c2.error;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Broke(e2)));
			case 3:
				if(cursor.currentPos < cursor.length) {
					var v1 = finish();
					var v2 = new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY));
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(v1,mk(v2))));
				} else if(!resume) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),flush())));
				} else {
					var _g2 = p.eof(cursor);
					switch(_g2._hx_index) {
					case 0:
						var result = _g2.data;
						var ret1 = consume(result).map(function(_) {
							return tink_io_ParseResult.Parsed(finish(),flush());
						});
						return ret1.gather();
					case 1:
						var e3 = _g2.failure;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e3,flush())));
					}
				}
				break;
			}
		});
		return ret.gather();
	}
	static parse(s,p) {
		var res = null;
		var onResult = function(r) {
			res = r;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst({ resume : false}));
		};
		return tink_io__$StreamParser_StreamParser_$Impl_$.doParse(s,p,onResult,function() {
			return res;
		});
	}
	static parseStream(s,p) {
		var next = null;
		next = function(step) {
			if(s.get_depleted()) {
				step(tink_streams_Step.End);
			} else {
				tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var rest = o.rest;
						var result = o.data;
						s = rest;
						var next1 = tink_streams_Step.Link(result,tink_streams_Generator.stream(next));
						step(next1);
						break;
					case 1:
						var _g1 = o.rest;
						var e = o.e;
						step(tink_streams_Step.Fail(e));
						break;
					case 2:
						var e1 = o.e;
						step(tink_streams_Step.Fail(e1));
						break;
					}
				});
			}
		};
		return tink_streams_Generator.stream(next);
	}
}
tink_io__$StreamParser_StreamParser_$Impl_$.__name__ = true;
class tink_io_StreamParserObject {
}
tink_io_StreamParserObject.__name__ = true;
tink_io_StreamParserObject.__isInterface__ = true;
Object.assign(tink_io_StreamParserObject.prototype, {
	__class__: tink_io_StreamParserObject
});
class tink_io_BytewiseParser {
	read(char) {
		throw new js__$Boot_HaxeError("abstract");
	}
	progress(cursor) {
		while(true) {
			var _g = this.read(cursor.currentByte);
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				var r = _g.r;
				cursor.next();
				return tink_io_ParseStep.Done(r);
			case 2:
				var e = _g.e;
				return tink_io_ParseStep.Failed(e);
			}
			if(!cursor.next()) {
				break;
			}
		}
		return tink_io_ParseStep.Progressed;
	}
	eof(rest) {
		var _g = this.read(-1);
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Unexpected end of input",{ fileName : "tink/io/StreamParser.hx", lineNumber : 180, className : "tink.io.BytewiseParser", methodName : "eof"}));
		case 1:
			var r = _g.r;
			return tink_core_Outcome.Success(r);
		case 2:
			var e = _g.e;
			return tink_core_Outcome.Failure(e);
		}
	}
}
tink_io_BytewiseParser.__name__ = true;
tink_io_BytewiseParser.__interfaces__ = [tink_io_StreamParserObject];
Object.assign(tink_io_BytewiseParser.prototype, {
	__class__: tink_io_BytewiseParser
});
class tink_io_Splitter extends tink_io_BytewiseParser {
	constructor(delim) {
		super();
		this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
		this.delim = delim;
	}
	read(char) {
		if(char == -1) {
			return tink_io_ParseStep.Done(haxe_ds_Option.None);
		}
		this.buf = tink__$Chunk_Chunk_$Impl_$.catChunk(this.buf,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(String.fromCodePoint(char))));
		if(this.buf.getLength() >= this.delim.getLength()) {
			var bcursor = this.buf.getCursor();
			var delta = this.buf.getLength() - this.delim.getLength();
			bcursor.moveTo(bcursor.currentPos + delta);
			var dcursor = this.delim.getCursor();
			var _g = 0;
			var _g1 = this.delim.getLength();
			while(_g < _g1) {
				var i = _g++;
				if(bcursor.currentByte != dcursor.currentByte) {
					return tink_io_ParseStep.Progressed;
				} else {
					bcursor.next();
					dcursor.next();
				}
			}
			var out = tink_io_ParseStep.Done(haxe_ds_Option.Some(this.buf.slice(0,bcursor.currentPos - this.delim.getLength())));
			this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
			return out;
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
}
tink_io_Splitter.__name__ = true;
tink_io_Splitter.__super__ = tink_io_BytewiseParser;
Object.assign(tink_io_Splitter.prototype, {
	__class__: tink_io_Splitter
});
class tink_io_SimpleBytewiseParser extends tink_io_BytewiseParser {
	constructor(f) {
		super();
		this._read = f;
	}
	read(char) {
		return this._read(char);
	}
}
tink_io_SimpleBytewiseParser.__name__ = true;
tink_io_SimpleBytewiseParser.__super__ = tink_io_BytewiseParser;
Object.assign(tink_io_SimpleBytewiseParser.prototype, {
	__class__: tink_io_SimpleBytewiseParser
});
class tink_io_Transformer {
}
tink_io_Transformer.__name__ = true;
tink_io_Transformer.__isInterface__ = true;
Object.assign(tink_io_Transformer.prototype, {
	__class__: tink_io_Transformer
});
class tink_io_WorkerObject {
}
tink_io_WorkerObject.__name__ = true;
tink_io_WorkerObject.__isInterface__ = true;
Object.assign(tink_io_WorkerObject.prototype, {
	__class__: tink_io_WorkerObject
});
class tink_io__$Worker_EagerWorker {
	constructor() {
	}
	work(task) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(task.get()));
	}
}
tink_io__$Worker_EagerWorker.__name__ = true;
tink_io__$Worker_EagerWorker.__interfaces__ = [tink_io_WorkerObject];
Object.assign(tink_io__$Worker_EagerWorker.prototype, {
	__class__: tink_io__$Worker_EagerWorker
});
class tink_io__$Worker_Worker_$Impl_$ {
	static ensure(this1) {
		if(this1 == null) {
			return tink_io__$Worker_Worker_$Impl_$.get();
		} else {
			return this1;
		}
	}
	static get() {
		return tink_io__$Worker_Worker_$Impl_$.pool[Std.random(tink_io__$Worker_Worker_$Impl_$.pool.length)];
	}
	static work(this1,task) {
		return this1.work(task);
	}
}
tink_io__$Worker_Worker_$Impl_$.__name__ = true;
class tink_streams_Generator extends tink_streams_StreamBase {
	constructor(upcoming) {
		if(tink_streams_StreamBase._hx_skip_constructor) {
			super();
			return;
		}
		tink_streams_StreamBase._hx_skip_constructor = true;
		super();
		tink_streams_StreamBase._hx_skip_constructor = false;
		this._hx_constructor(upcoming);
	}
	_hx_constructor(upcoming) {
		super._hx_constructor();
		this.upcoming = upcoming;
	}
	next() {
		return this.upcoming;
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					var v = e.value;
					handler(v).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e1 = s.e;
							cb(tink_streams_Conclusion.Clogged(e1,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e2 = e.e;
					cb(tink_streams_Conclusion.Failed(e2));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	static stream(step) {
		return new tink_streams_Generator(tink_core__$Future_Future_$Impl_$.async(step,true));
	}
}
tink_streams_Generator.__name__ = true;
tink_streams_Generator.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Generator.prototype, {
	__class__: tink_streams_Generator
});
class tink_io_js_BlobSource extends tink_streams_Generator {
	constructor(name,blob,pos,chunkSize) {
		tink_streams_StreamBase._hx_skip_constructor = true;
		super();
		tink_streams_StreamBase._hx_skip_constructor = false;
		this._hx_constructor(name,blob,pos,chunkSize);
	}
	_hx_constructor(name,blob,pos,chunkSize) {
		this.name = name;
		super._hx_constructor(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(pos >= blob.size) {
				cb(tink_streams_Step.End);
			} else {
				var end = pos + chunkSize;
				if(end > blob.size) {
					end = blob.size;
				}
				var reader = new FileReader();
				reader.onload = function() {
					var chunk = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(reader.result));
					var tmp = tink_streams_Step.Link(chunk,new tink_io_js_BlobSource(name,blob,end,chunkSize));
					cb(tmp);
				};
				reader.onerror = function(e) {
					var tmp1 = tink_streams_Step.Fail(tink_core_TypedError.withData(500,e.message,e,{ fileName : "tink/io/js/BlobSource.hx", lineNumber : 29, className : "tink.io.js.BlobSource", methodName : "new"}));
					cb(tmp1);
				};
				var tmp2 = blob.slice(pos,end);
				reader.readAsArrayBuffer(tmp2);
			}
		},true));
	}
	static wrap(name,blob,chunkSize) {
		return new tink_io_js_BlobSource(name,blob,0,chunkSize);
	}
}
tink_io_js_BlobSource.__name__ = true;
tink_io_js_BlobSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_js_BlobSource.prototype, {
	__class__: tink_io_js_BlobSource
});
class tink_io_nodejs_NodejsSink extends tink_io_SinkBase {
	constructor(target) {
		super();
		this.target = target;
	}
	consume(source,options) {
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			var ret1 = _gthis.target.write(c).map(function(w) {
				switch(w._hx_index) {
				case 0:
					if(w.data) {
						return tink_streams_Handled.Resume;
					} else {
						return tink_streams_Handled.BackOff;
					}
					break;
				case 1:
					var e = w.failure;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret1.gather();
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				_gthis.target.end();
			});
		}
		var ret2 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise);
		});
		return ret2.gather();
	}
	static wrap(name,native) {
		return new tink_io_nodejs_NodejsSink(new tink_io_nodejs_WrappedWritable(name,native));
	}
}
tink_io_nodejs_NodejsSink.__name__ = true;
tink_io_nodejs_NodejsSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io_nodejs_NodejsSink.prototype, {
	__class__: tink_io_nodejs_NodejsSink
});
class tink_io_nodejs_NodejsSource extends tink_streams_Generator {
	constructor(target) {
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			target.read().handle(function(o) {
				var tmp;
				switch(o._hx_index) {
				case 0:
					var _g = o.data;
					if(_g == null) {
						tmp = tink_streams_Step.End;
					} else {
						var chunk = _g;
						tmp = tink_streams_Step.Link(chunk,new tink_io_nodejs_NodejsSource(target));
					}
					break;
				case 1:
					var e = o.failure;
					tmp = tink_streams_Step.Fail(e);
					break;
				}
				cb(tmp);
			});
		},true));
	}
	static wrap(name,native,chunkSize,onEnd) {
		return new tink_io_nodejs_NodejsSource(new tink_io_nodejs_WrappedReadable(name,native,chunkSize,onEnd));
	}
}
tink_io_nodejs_NodejsSource.__name__ = true;
tink_io_nodejs_NodejsSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_nodejs_NodejsSource.prototype, {
	__class__: tink_io_nodejs_NodejsSource
});
class tink_io_nodejs_WrappedReadable {
	constructor(name,native,chunkSize,onEnd) {
		this.name = name;
		this.native = native;
		this.chunkSize = chunkSize;
		this.end = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			native.once("end",function() {
				cb(tink_core_Outcome.Success(null));
			});
			native.once("error",function(e) {
				var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedReadable", methodName : "new"}));
				cb(tmp);
			});
		}).eager();
		if(onEnd != null) {
			this.end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
				process.nextTick(onEnd);
			}));
		}
	}
	read() {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis.native.read(_gthis.chunkSize);
					if(_g == null) {
						_gthis.native.once("readable",attempt);
					} else {
						var chunk = _g;
						var buf = typeof(chunk) == "string" ? new js_node_buffer_Buffer(chunk) : chunk;
						var attempt1 = tink_core_Outcome.Success(new tink_chunk_nodejs_BufferChunk(buf));
						cb(attempt1);
					}
				} catch( e ) {
					var attempt2 = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 48, className : "tink.io.nodejs.WrappedReadable", methodName : "read"}));
					cb(attempt2);
				}
			};
			attempt();
		}),this.end);
	}
}
tink_io_nodejs_WrappedReadable.__name__ = true;
Object.assign(tink_io_nodejs_WrappedReadable.prototype, {
	__class__: tink_io_nodejs_WrappedReadable
});
class tink_io_nodejs_WrappedWritable {
	constructor(name,native) {
		this.name = name;
		this.native = native;
		this.ended = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			native.once("end",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.once("finish",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.once("close",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.on("error",function(e) {
				var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + ": " + e.message,{ fileName : "tink/io/nodejs/WrappedWritable.hx", lineNumber : 24, className : "tink.io.nodejs.WrappedWritable", methodName : "new"}));
				cb(tmp);
			});
		});
	}
	end() {
		var didEnd = false;
		var this1 = this.ended.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			didEnd = true;
		}));
		if(this1 != null) {
			this1.cancel();
		}
		if(didEnd) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		}
		this.native.end();
		return tink_core__$Promise_Promise_$Impl_$.next(this.ended,function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(true)));
		});
	}
	write(chunk) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(chunk.getLength() == 0) {
				cb(tink_core_Outcome.Success(true));
				return;
			}
			var buf;
			if(js_node_buffer_Buffer.isBuffer(chunk.buffer)) {
				buf = chunk.buffer;
			} else {
				var b = chunk.toBytes();
				var data = b.b;
				buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
			}
			var f = cb;
			var a1 = tink_core_Outcome.Success(true);
			var tmp = function() {
				f(a1);
			};
			_gthis.native.write(buf,null,tmp);
		}),this.ended);
	}
}
tink_io_nodejs_WrappedWritable.__name__ = true;
Object.assign(tink_io_nodejs_WrappedWritable.prototype, {
	__class__: tink_io_nodejs_WrappedWritable
});
class tink_io_std_InputSource extends tink_streams_Generator {
	constructor(name,target,worker,buf,offset) {
		var next = function(buf1,offset1) {
			return new tink_io_std_InputSource(name,target,worker,buf1,offset1);
		};
		var free = buf.length - offset;
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_io__$Worker_Worker_$Impl_$.work(worker,new tink_core__$Lazy_LazyFunc(function() {
				try {
					var read = target.readBytes(buf,offset,free);
					if(read == 0) {
						return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
					} else {
						var nextOffset = free - read < 1024 ? 0 : offset + read;
						var nextBuf = nextOffset == 0 ? new haxe_io_Bytes(new ArrayBuffer(buf.length)) : buf;
						return tink_streams_Step.Link(tink_chunk_ByteChunk.of(buf).slice(offset,offset + read),next(nextBuf,nextOffset));
					}
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					if(((e1) instanceof haxe_io_Eof)) {
						var e2 = e1;
						return tink_streams_Step.End;
					} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
						var e3 = e1;
						if(e3._hx_index == 0) {
							return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
						} else {
							return tink_streams_Step.Fail(tink_core_TypedError.withData(null,"Failed to read from " + name,e3,{ fileName : "tink/io/std/InputSource.hx", lineNumber : 50, className : "tink.io.std.InputSource", methodName : "new"}));
						}
					} else {
						throw e;
					}
				}
			})).handle(function(step) {
				switch(step._hx_index) {
				case 1:
					var _g = step.e;
					try {
						target.close();
					} catch( e4 ) {
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
					}
					break;
				case 2:
					try {
						target.close();
					} catch( e6 ) {
						var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
					}
					break;
				default:
				}
				cb(step);
			});
		},true));
	}
}
tink_io_std_InputSource.__name__ = true;
tink_io_std_InputSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_std_InputSource.prototype, {
	__class__: tink_io_std_InputSource
});
class tink_io_std_OutputSink extends tink_io_SinkBase {
	constructor(name,target,worker) {
		super();
		this.name = name;
		this.target = target;
		this.worker = worker;
	}
	consume(source,options) {
		var rest = tink__$Chunk_Chunk_$Impl_$.EMPTY;
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var pos = 0;
				var bytes = c.toBytes();
				var write = null;
				write = function() {
					if(pos == bytes.length) {
						cb(tink_streams_Handled.Resume);
					} else {
						tink_io__$Worker_Worker_$Impl_$.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
							try {
								return tink_core_Outcome.Success(_gthis.target.writeBytes(bytes,pos,bytes.length - pos));
							} catch( e ) {
								var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
								if(((e1) instanceof haxe_io_Eof)) {
									var e2 = e1;
									return tink_core_Outcome.Success(-1);
								} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
									var e3 = e1;
									if(e3._hx_index == 0) {
										return tink_core_Outcome.Success(0);
									} else {
										return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e3,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 40, className : "tink.io.std.OutputSink", methodName : "consume"}));
									}
								} else if(((e1) instanceof tink_core_TypedError)) {
									return tink_core_Outcome.Failure(e1);
								} else {
									return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e1,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 46, className : "tink.io.std.OutputSink", methodName : "consume"}));
								}
							}
						})).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								if(_g == -1) {
									rest = tink_chunk_ByteChunk.of(bytes).slice(pos,bytes.length);
									cb(tink_streams_Handled.Finish);
								} else {
									var v = _g;
									pos += v;
									if(pos == bytes.length) {
										cb(tink_streams_Handled.Resume);
									} else {
										write();
									}
								}
								break;
							case 1:
								var e4 = o.failure;
								cb(tink_streams_Handled.Clog(e4));
								break;
							}
						});
					}
				};
				write();
			});
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				try {
					_gthis.target.close();
				} catch( e5 ) {
					var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				}
			});
		}
		var ret1 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise,rest);
		});
		return ret1.gather();
	}
}
tink_io_std_OutputSink.__name__ = true;
tink_io_std_OutputSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io_std_OutputSink.prototype, {
	__class__: tink_io_std_OutputSink
});
class tink_streams__$IdealStream_IdealStream_$Impl_$ {
	static promiseOfIdealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamNoise(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static collect(this1) {
		var buf = [];
		var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
			buf.push(x);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(c) {
			return buf;
		});
		return ret.gather();
	}
}
tink_streams__$IdealStream_IdealStream_$Impl_$.__name__ = true;
class tink_streams_IdealStreamBase extends tink_streams_StreamBase {
	constructor() {
		super();
	}
	idealize(rescue) {
		return this;
	}
}
tink_streams_IdealStreamBase.__name__ = true;
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_IdealStreamBase.prototype, {
	__class__: tink_streams_IdealStreamBase
});
class tink_streams__$RealStream_RealStream_$Impl_$ {
	static promiseOfIdealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamNoise(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static promiseOfRealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamError(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static collect(this1) {
		var buf = [];
		var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
			buf.push(x);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(c) {
			switch(c._hx_index) {
			case 0:
				var _g1 = c.rest;
				throw new js__$Boot_HaxeError("unreachable");
			case 2:
				var e = c.error;
				return tink_core_Outcome.Failure(e);
			case 3:
				return tink_core_Outcome.Success(buf);
			}
		});
		return ret.gather();
	}
}
tink_streams__$RealStream_RealStream_$Impl_$.__name__ = true;
class tink_streams__$Stream_Stream_$Impl_$ {
	static get_depleted(this1) {
		return this1.get_depleted();
	}
	static dirty(this1) {
		return this1;
	}
	static single(i) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
	}
	static ofIterator(i) {
		var next = null;
		next = function(step) {
			step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
		};
		return tink_streams_Generator.stream(next);
	}
	static flatten(f) {
		return new tink_streams_FutureStream(f);
	}
	static promiseIdeal(f) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
	}
	static promiseReal(f) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
	}
	static promise(f) {
		var ret = f.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var s = o.data;
				return tink_streams__$Stream_Stream_$Impl_$.dirty(s);
			case 1:
				var e = o.failure;
				return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
			}
		});
		return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
	}
	static ofError(e) {
		return new tink_streams__$Stream_ErrorStream(e);
	}
}
tink_streams__$Stream_Stream_$Impl_$.__name__ = true;
var tink_streams_RegroupStatus = $hxEnums["tink.streams.RegroupStatus"] = { __ename__ : true, __constructs__ : ["Flowing","Errored","Ended"]
	,Flowing: {_hx_index:0,__enum__:"tink.streams.RegroupStatus",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.RegroupStatus",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Ended: {_hx_index:2,__enum__:"tink.streams.RegroupStatus",toString:$estr}
};
var tink_streams_RegroupResult = $hxEnums["tink.streams.RegroupResult"] = { __ename__ : true, __constructs__ : ["Converted","Terminated","Untouched","Errored"]
	,Converted: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Terminated: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Untouched: {_hx_index:2,__enum__:"tink.streams.RegroupResult",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_streams__$Stream_Regrouper_$Impl_$ {
	static ofIgnorance(f) {
		return { apply : function(i,_) {
			return f(i);
		}};
	}
	static ofIgnoranceSync(f) {
		return { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		}};
	}
	static ofFunc(f) {
		return { apply : f};
	}
	static ofFuncSync(f) {
		return { apply : function(i,s) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
		}};
	}
}
tink_streams__$Stream_Regrouper_$Impl_$.__name__ = true;
class tink_streams__$Stream_CompoundStream extends tink_streams_StreamBase {
	constructor(parts) {
		super();
		this.parts = parts;
	}
	get_depleted() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	next() {
		var _gthis = this;
		if(this.parts.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
		} else {
			var ret = this.parts[0].next().flatMap(function(v) {
				switch(v._hx_index) {
				case 0:
					var rest = v.next;
					var v1 = v.value;
					var copy = _gthis.parts.slice();
					copy[0] = rest;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(v1,new tink_streams__$Stream_CompoundStream(copy))));
				case 2:
					if(_gthis.parts.length > 1) {
						return _gthis.parts[1].next();
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
					}
					break;
				default:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
				}
			});
			return ret.gather();
		}
	}
	decompose(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	forEach(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
	static consumeParts(parts,handler,cb) {
		if(parts.length == 0) {
			cb(tink_streams_Conclusion.Depleted);
		} else {
			parts[0].forEach(handler).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					parts = parts.slice();
					parts[0] = rest;
					var tmp = tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts));
					cb(tmp);
					break;
				case 1:
					var at = o.at;
					var e = o.error;
					if(at.get_depleted()) {
						parts = parts.slice(1);
					} else {
						parts = parts.slice();
						parts[0] = at;
					}
					var tmp1 = tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts));
					cb(tmp1);
					break;
				case 2:
					var e1 = o.error;
					cb(tink_streams_Conclusion.Failed(e1));
					break;
				case 3:
					tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
					break;
				}
			});
		}
	}
	static of(streams) {
		var ret = [];
		var _g = 0;
		while(_g < streams.length) {
			var s = streams[_g];
			++_g;
			s.decompose(ret);
		}
		if(ret.length == 0) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams__$Stream_CompoundStream(ret);
		}
	}
}
tink_streams__$Stream_CompoundStream.__name__ = true;
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_CompoundStream.prototype, {
	__class__: tink_streams__$Stream_CompoundStream
});
class tink_streams__$Stream_RegroupStream extends tink_streams__$Stream_CompoundStream {
	constructor(source,f,prev) {
		if(prev == null) {
			prev = tink_streams_Empty.inst;
		}
		var ret = null;
		var terminated = false;
		var buf = [];
		var ret1 = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
			buf.push(item);
			var ret2 = f.apply(buf,tink_streams_RegroupStatus.Flowing).map(function(o) {
				switch(o._hx_index) {
				case 0:
					var v = o.data;
					ret = v;
					return tink_streams_Handled.Finish;
				case 1:
					var v1 = o.data;
					var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
					if(v1._hx_index == 0) {
						var v2 = v1.v;
						ret = v2;
					} else {
						ret = l.get();
					}
					terminated = true;
					return tink_streams_Handled.Finish;
				case 2:
					return tink_streams_Handled.Resume;
				case 3:
					var e = o.e;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret2.gather();
		})).map(function(o1) {
			switch(o1._hx_index) {
			case 0:
				if(terminated) {
					return ret;
				} else {
					var rest = o1.rest;
					return new tink_streams__$Stream_RegroupStream(rest,f,ret);
				}
				break;
			case 1:
				var _g1 = o1.at;
				var e1 = o1.error;
				return new tink_streams__$Stream_ErrorStream(e1);
			case 2:
				var e2 = o1.error;
				return tink_streams__$Stream_Stream_$Impl_$.ofError(e2);
			case 3:
				if(buf.length == 0) {
					return tink_streams_Empty.inst;
				} else {
					var ret3 = f.apply(buf,tink_streams_RegroupStatus.Ended).map(function(o2) {
						switch(o2._hx_index) {
						case 0:
							var v3 = o2.data;
							return v3;
						case 1:
							var v4 = o2.data;
							var l1 = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
							if(v4._hx_index == 0) {
								var v5 = v4.v;
								return v5;
							} else {
								return l1.get();
							}
							break;
						case 2:
							return tink_streams_Empty.inst;
						case 3:
							var e3 = o2.e;
							return tink_streams__$Stream_Stream_$Impl_$.ofError(e3);
						}
					});
					return tink_streams__$Stream_Stream_$Impl_$.flatten(ret3.gather());
				}
				break;
			}
		});
		var next = tink_streams__$Stream_Stream_$Impl_$.flatten(ret1.gather());
		super([prev,next]);
	}
}
tink_streams__$Stream_RegroupStream.__name__ = true;
tink_streams__$Stream_RegroupStream.__super__ = tink_streams__$Stream_CompoundStream;
Object.assign(tink_streams__$Stream_RegroupStream.prototype, {
	__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : true, __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
class tink_streams__$Stream_CloggedStream extends tink_streams_StreamBase {
	constructor(rest,error) {
		super();
		this.rest = rest;
		this.error = error;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(this.error,this.rest)));
	}
}
tink_streams__$Stream_CloggedStream.__name__ = true;
tink_streams__$Stream_CloggedStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_CloggedStream.prototype, {
	__class__: tink_streams__$Stream_CloggedStream
});
class tink_streams__$Stream_ErrorStream extends tink_streams_StreamBase {
	constructor(error) {
		super();
		this.error = error;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
}
tink_streams__$Stream_ErrorStream.__name__ = true;
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_ErrorStream.prototype, {
	__class__: tink_streams__$Stream_ErrorStream
});
class tink_streams__$Stream_Mapping_$Impl_$ {
	static _new(o) {
		var this1 = o;
		return this1;
	}
	static ofNext(n) {
		var this1 = { apply : function(i,_) {
			var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(o) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o)))));
			});
			var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
			var ret = this2.flatMap(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var d = o1.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
				case 1:
					var e = o1.failure;
					return f(e);
				}
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofAsync(f) {
		var this1 = { apply : function(i,_) {
			var ret = f(i[0]).map(function(o) {
				return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o));
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofSync(f) {
		var this1 = { apply : function(i,_) {
			var v;
			var _g = f(i[0]);
			switch(_g._hx_index) {
			case 0:
				var v1 = _g.data;
				v = tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(v1));
				break;
			case 1:
				var e = _g.failure;
				v = tink_streams_RegroupResult.Errored(e);
				break;
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
		}};
		return this1;
	}
	static ofPlain(f) {
		var this1 = { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(f(i[0])))));
		}};
		return this1;
	}
}
tink_streams__$Stream_Mapping_$Impl_$.__name__ = true;
class tink_streams__$Stream_Filter_$Impl_$ {
	static _new(o) {
		var this1 = o;
		return this1;
	}
	static ofNext(n) {
		var this1 = { apply : function(i,_) {
			var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(matched) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst))));
			});
			var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
			var ret = this2.flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					var d = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
				case 1:
					var e = o.failure;
					return f(e);
				}
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofAsync(f) {
		var this1 = { apply : function(i,_) {
			var ret = f(i[0]).map(function(matched) {
				return tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofSync(f) {
		var this1 = { apply : function(i,_) {
			var v;
			var _g = f(i[0]);
			switch(_g._hx_index) {
			case 0:
				var v1 = _g.data;
				v = tink_streams_RegroupResult.Converted(v1 ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
				break;
			case 1:
				var e = _g.failure;
				v = tink_streams_RegroupResult.Errored(e);
				break;
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
		}};
		return this1;
	}
	static ofPlain(f) {
		var this1 = { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]) ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst)));
		}};
		return this1;
	}
}
tink_streams__$Stream_Filter_$Impl_$.__name__ = true;
class tink_streams_IdealizeStream extends tink_streams_IdealStreamBase {
	constructor(target,rescue) {
		super();
		this.target = target;
		this.rescue = rescue;
	}
	get_depleted() {
		return this.target.get_depleted();
	}
	next() {
		var _gthis = this;
		var ret = this.target.next().flatMap(function(v) {
			if(v._hx_index == 1) {
				var e = v.e;
				return _gthis.rescue(e).idealize(_gthis.rescue).next();
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}
		});
		return ret.gather();
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end._hx_index) {
				case 0:
					var rest = end.rest;
					var tmp = tink_streams_Conclusion.Halted(rest.idealize(_gthis.rescue));
					cb(tmp);
					break;
				case 1:
					var at = end.at;
					var e = end.error;
					var tmp1 = tink_streams_Conclusion.Clogged(e,at.idealize(_gthis.rescue));
					cb(tmp1);
					break;
				case 2:
					var e1 = end.error;
					_gthis.rescue(e1).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
}
tink_streams_IdealizeStream.__name__ = true;
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
Object.assign(tink_streams_IdealizeStream.prototype, {
	__class__: tink_streams_IdealizeStream
});
class tink_streams_Single extends tink_streams_StreamBase {
	constructor(value) {
		super();
		this.value = value;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(this.value.get(),tink_streams_Empty.inst)));
	}
	forEach(handle) {
		var _gthis = this;
		var ret = handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step.e;
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
}
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Single.prototype, {
	__class__: tink_streams_Single
});
class tink_streams__$Stream_Handler_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static apply(this1,item) {
		return this1(item);
	}
	static ofSafeSync(f) {
		var this1 = function(i) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		};
		return this1;
	}
	static ofUnknownSync(f) {
		var this1 = function(i) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		};
		return this1;
	}
	static ofSafe(f) {
		var this1 = f;
		return this1;
	}
	static ofUnknown(f) {
		var this1 = f;
		return this1;
	}
}
tink_streams__$Stream_Handler_$Impl_$.__name__ = true;
class tink_streams__$Stream_Reducer_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static apply(this1,res,item) {
		return this1(res,item);
	}
	static ofSafeSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
		};
		return this1;
	}
	static ofUnknownSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
		};
		return this1;
	}
	static ofSafe(f) {
		var this1 = f;
		return this1;
	}
	static ofPlainSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
		};
		return this1;
	}
	static ofUnknown(f) {
		var this1 = f;
		return this1;
	}
	static ofPromiseBased(f) {
		var this1 = function(res,cur) {
			var ret = f(res,cur).map(function(s) {
				switch(s._hx_index) {
				case 0:
					var r = s.data;
					return tink_streams_ReductionStep.Progress(r);
				case 1:
					var e = s.failure;
					return tink_streams_ReductionStep.Crash(e);
				}
			});
			return ret.gather();
		};
		return this1;
	}
}
tink_streams__$Stream_Reducer_$Impl_$.__name__ = true;
class tink_streams_FutureStream extends tink_streams_StreamBase {
	constructor(f) {
		super();
		this.f = f;
	}
	next() {
		var ret = this.f.flatMap(function(s) {
			return s.next();
		});
		return ret.gather();
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
}
tink_streams_FutureStream.__name__ = true;
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_FutureStream.prototype, {
	__class__: tink_streams_FutureStream
});
class tink_streams_BlendStream extends tink_streams_Generator {
	constructor(a,b) {
		var first = null;
		var wait = function(s) {
			var ret = s.next().map(function(o) {
				if(first == null) {
					first = s;
				}
				return o;
			});
			return ret.gather();
		};
		var n1 = wait(a);
		var n2 = wait(b);
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_core__$Future_Future_$Impl_$.first(n1,n2).handle(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var rest = o1.next;
					var item = o1.value;
					var tmp = tink_streams_Step.Link(item,new tink_streams_BlendStream(rest,first == a ? b : a));
					cb(tmp);
					break;
				case 1:
					var e = o1.e;
					cb(tink_streams_Step.Fail(e));
					break;
				case 2:
					(first == a ? n2 : n1).handle(cb);
					break;
				}
			});
		}));
	}
}
tink_streams_BlendStream.__name__ = true;
tink_streams_BlendStream.__super__ = tink_streams_Generator;
Object.assign(tink_streams_BlendStream.prototype, {
	__class__: tink_streams_BlendStream
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : true, __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
class tink_streams_SignalStream extends tink_streams_Generator {
	constructor(signal) {
		var ret = tink_core__$Signal_Signal_$Impl_$.nextTime(signal).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var data = o.data;
				return tink_streams_Step.Link(data,new tink_streams_SignalStream(signal));
			case 1:
				var e = o.e;
				return tink_streams_Step.Fail(e);
			case 2:
				return tink_streams_Step.End;
			}
		});
		super(ret.gather().eager());
	}
}
tink_streams_SignalStream.__name__ = true;
tink_streams_SignalStream.__super__ = tink_streams_Generator;
Object.assign(tink_streams_SignalStream.prototype, {
	__class__: tink_streams_SignalStream
});
var tink_streams_Yield = $hxEnums["tink.streams.Yield"] = { __ename__ : true, __constructs__ : ["Data","Fail","End"]
	,Data: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Yield",toString:$estr}
};
class which_Program {
	constructor() {
		this.version = false;
		this.silent = false;
		this.help = false;
		this.all = false;
	}
	run(rest) {
		if(this.help) {
			var v = new tink_cli_doc_DefaultFormatter().format(tink_cli_Doc0.get());
			process.stdout.write(Std.string(v));
			process.stdout.write("\n");
			return;
		}
		if(this.version) {
			process.stdout.write(Std.string(which_Program.packageVersion));
			process.stdout.write("\n");
			return;
		}
		process.stdout.write("Program path:");
		process.stdout.write("\n");
		var v1 = __filename;
		process.stdout.write(Std.string(v1));
		process.stdout.write("\n");
	}
	static main() {
		new tink_cli_Router0(new which_Program(),new tink_cli_prompt_RetryPrompt(5)).process(process.argv.slice(2)).handle(tink_Cli.exit);
	}
	static find(command,options) {
	}
}
which_Program.__name__ = true;
Object.assign(which_Program.prototype, {
	__class__: which_Program
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink__$Chunk_Chunk_$Impl_$.EMPTY = new tink__$Chunk_EmptyChunk();
tink__$Stringly_Stringly_$Impl_$.SUPPORTED_DATE_REGEX = new EReg("^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{3})?(Z|[\\+-]\\d{2}:\\d{2})$","");
tink_chunk_nodejs_BufferChunk.alloc = "allocUnsafe" in Buffer ? js_node_buffer_Buffer.allocUnsafe : function(size) {
	return new js_node_buffer_Buffer(size);
};
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Callback_Callback_$Impl_$.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core__$Future_Future_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core__$Future_Future_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core__$Future_Future_$Impl_$.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core__$Lazy_Lazy_$Impl_$.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core__$Progress_Progress_$Impl_$.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_CompositeProgress._hx_skip_constructor = false;
tink_core__$Promise_Promise_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core__$Promise_Promise_$Impl_$.NEVER = (function($this) {
	var $r;
	var ret = tink_core__$Future_Future_$Impl_$.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_io__$Sink_Blackhole.inst = new tink_io__$Sink_Blackhole();
tink_io__$Sink_SinkYielding_$Impl_$.BLACKHOLE = tink_io__$Sink_Blackhole.inst;
tink_streams_StreamBase._hx_skip_constructor = false;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io__$Source_Source_$Impl_$.EMPTY = tink_streams_Empty.inst;
tink_io__$Worker_Worker_$Impl_$.EAGER = new tink_io__$Worker_EagerWorker();
tink_io__$Worker_Worker_$Impl_$.pool = [tink_io__$Worker_Worker_$Impl_$.EAGER];
which_Program.__meta__ = { obj : { expose : null}};
which_Program.packageVersion = "0.1.0";
which_Program.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
